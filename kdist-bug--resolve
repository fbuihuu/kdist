#! /bin/bash
#
# Exit values:
#
#   0 : Success or local <rev> is indirectly registered as fix for <bug-id> already
#   1 : <rev> is part of upstream and is already registered
#   6 : <rev> has an incorrect redirection to a non-upstream commit
#   7 : <bug-id> is already marked as solved by an upstream commit
#
SUMMARY="Mark bug as fixed"

USAGE="[-q] [--in-mainline|--not-in-mainline] <bug-id> [<rev>]"

is_mainlined_rev=
force=no
verbose=yes

while
	case $1 in
	-f|--force)
		force=yes ;;
	-q|--quiet)
		verbose=false ;;
	--in-mainline)
		is_mainlined_rev=true ;;
	--not-in-mainline)
		is_mainlined_rev=false ;;
	-*)
		kdist__usage ;;
	*)
		break
	esac
do
	shift
done

case $# in
1)
	id=$1
	rev=HEAD ;;
2)
	id=$1
	rev=$2 ;;
*)
	kdist__usage
esac

kdist__cd_repository kernel

sha1=$(git rev-parse --verify $rev^{}) ||
exit

test $is_mainlined_rev || {
	git__is_ancestor master $sha1 &&
	is_mainlined_rev=true ||
	is_mainlined_rev=false
}

bug_db__query_by_id $id ||
die "Unknown bug '$id'."

$bug_is_ignored &&
warn "warning: fixing $id which is currently ignored."


resolve__bug () {
	case "$(bug_db__query_by_rev $1)",$is_mainlined_rev in
	*$id*,true)
		warn "warning: $1 is already registered as an upstream fix for '$id'."
		return 1
		;;
	*$id*,false)
		# The passed rev is a local commit which has a
		# reference that is already registered. It commonly
		# happens when rebasing a branch: don't consider this
		# as an error.
		return 0
		;;
	*)
		bug_db__resolve $id $1
	esac
}

#
# Registered commits are essentially ones which are used as
# "reference" for a fix. Stable commits are usually not in this case
# since they points to upstream commits. Well sometimes this pointer
# is missing (it's a mistake) and the stable commit becomes the
# reference.
#
# We can also register local commits which has not been mainlined yet
# (hence not in stable too).
#
if ! $is_mainlined_rev; then
	#
	# Parse the commit message in order to figure out if it points
	# to a mainline commit (backported commit into stable branches
	# for example). It's the common case, and we register the
	# mainlined commit instead.
	#
	commit_set=$(bug__resolve_stable_commit $sha1)

	# If it's a local fix then register it and we're done.
	if test -z "$commit_set"; then
		say "Registering local commit $sha1 as fix for '$id'"
		resolve__bug $sha1
		exit
	fi

	# Make sure that new commits are really part of mainline.
	for r in $commit_set; do
		git__is_ancestor master $r &&
		continue

		warn "error: stable/local commit $sha1 has a redirection to a non mainlined commmit $r."
		exit 6
	done
fi

commit_set=${commit_set:-$sha1}

#
# At this point, we're going to register a mainline (set of)
# commmit(s). Check that no (set of) mainlined commit is already
# registered for that bug.
#
bug_db__find_all_fixes $id | while read r
do
	# Let resolve__bug() handle the case where the upstream commit
	# is already registered.
	case $commit_set in
	*$r*)	continue ;;
	esac

	git__is_ancestor master $r && {
		warn "error: another upstream commit '$r' is already registered as a fix"
		warn "for '$id', won't save '$commit_set' as a new *upstream* resolver."
		exit 7
	}
done || exit


for r in $commit_set; do
	say "Registering mainline commit $r as fix for '$id'"
	resolve__bug $r || exit
done
