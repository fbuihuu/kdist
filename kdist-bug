#! /bin/bash

SUMMARY="Track your BUGs"

USAGE="[--force] <command> [<args>]"


#
# init is kept as an option (not a command) because it's not intended
# for normal users, at least for now.
#
force=false

while
	case $1 in
	--force)	force=true ;;
	-*)		kdist__usage ;;
	*)		break
	esac
do
	shift
done

kdist_subcommand=$1
shift

bug_db__path () {
	echo $(kdist__get_repository bugs)/data/$1
}

bug_db__rev_path () {
	echo $(kdist__get_repository bugs)/revisions/${1::2}/${1:2}
}
mkdir -p $(bug_db__rev_path)

bug_db__check () {
	test -d $(kdist__get_repository bugs) || {
		warn "You don't seem to have any imported bugs in your project."
		warn "Try to import some with: 'kdist bug import' command."
		exit
	}
}

bug_db__insert () {
	local id=$1
	local path=$(bug_db__path $id)

	test -f $path &&
	bug "trying to insert already present bug $id"

	mkdir -p $(dirname $path) &&
	touch $path &&
	bug_url=$2 &&
	bug_db__update $id url
}

bug_db_all_fields="url flags since notes"

__reset_bug_queried_values () {
	local f

	for f in $bug_db_all_fields; do
		eval bug_$f=
	done
	bug_is_ignored=false
}

LF='
'

bug_db__query_by_id () {
	local $bug_db_all_fields
	local id=$1 f= v=

	__reset_bug_queried_values

	test -f $(bug_db__path $id) ||
	return

	while IFS='' read -r line; do
		#
		# All fields are terminated by an empty line.
		#
		case $line in
		' '*)
			test -n "$f" ||
			die "syntax error in $(bug_db__path $id)"

			# cumulate line for current field's value
			v+="${LF}${line# }" ;;
		*=*)
			test -n "$f" &&
			die "missing value separator for field $f"

			# parse a new field until empty line is met.
			f=${line%%=*}
			v=${line#*=}
			;;
		'')
			test -n "$f" ||
			die "only one field separator is allowed"

			# field separator, skip unknown field
			case $bug_db_all_fields in
			*$f*)	eval bug_$f=\"'$v'\" ;;
			esac
			f=
			v= ;;
		*)
			die "syntax error in $(bug_db__path $id)"
		esac
	done <$(bug_db__path "$id")

	# Just in case user manually edited the bug data.
	case $bug_since in
	v*)	bug_since=${bug_since#v} ;;
	esac

	case $bug_flags in
	*I*)	bug_is_ignored=true ;;
	esac
}

bug_db__query_by_rev () {
	local path=$(bug_db__rev_path $1)
	test -f $path && cat $path
}

bug_db__resolve () {
	local id=$1 sha1=$2
	local path=$(bug_db__rev_path $sha1)

	if test -f $path; then
		# does 'sha1' already resolve 'id' ?
		case "$(< $path)" in
		*$id*)	return ;;
		esac
	fi
	mkdir -p ${path%/*}
	echo $id >>$path
}

bug_db__unresolve () {
	local path=$(bug_db__rev_path $2)

	if test -f $path; then
		sed -i "/$1/d" $path
		test -s $path || rm -f $path
	fi
}

# Returns all commits that is known as a fix for the passed ID.
bug_db__find_all_fixes () {
	cd $(bug_db__rev_path)

	grep -rl $1 | while read r; do
		echo ${r%/*}${r#*/}
	done

	cd - >/dev/null
}

bug_db__sanitize_notes () {
	echo -n "$1" | git stripspace
}

bug_db__update () {
	local id=$1 field=$2 val
	local -i i=1

	val=bug_$field
	val=${!val}

	#
	# Try first to delete this field
	#
	sed -i -e "/^$field=/,/^$/d" $(bug_db__path $id)

	# sanitize some fields.
	case $field in
	since)
		val=${val#v} ;;
	notes)
		val=$(bug_db__sanitize_notes "$val") ;;
	flags)
		# bug_flags is not directly modified by caller, so
		# update it.
		bug_flags=
		$bug_is_ignored   && bug_flags+=I
		val=$bug_flags ;;
	esac

	test -z "$val" &&
	return

	case $(echo "$val" | wc -l) in
	1)
		echo "$field=$val"
		echo ;;
	*)
		# add prefix for multiline values
		echo -n $field=
		echo "$val" | sed -e '2,$s/^/ /'
		echo ;;
	esac >>$(bug_db__path $id)
}

bug_db__remove () {
	rm -f $(bug_db__path $1)
}

bug_db__list () (
	local reverse=-r

	shopt -s nullglob
	cd $(bug_db__path)

	while
		case "$1" in
		-r|--reverse)	reverse= ;;
		*)		break
		esac
	do
		shift
	done

	# Trap any unexisting bug first so we don't output any ids in
	# case of errors.
	for e in $@; do
		ls $e &>/dev/null || {
			warn "Unknown bug '$e'"
			return
		}
	done

	ls $reverse $@
)

#
# Scan the commit body in order to retrieve the corresponding upstream
# commit if the commit is part of a stable branch.
#
# It usually returns one commit but sometimes a fix can be splitted by
# several a set of commits.
#
_x40='[[:xdigit:]][[:xdigit:]][[:xdigit:]][[:xdigit:]][[:xdigit:]]'
_x40="$_x40$_x40$_x40$_x40$_x40$_x40$_x40$_x40"

z40=0000000000000000000000000000000000000000

bug__resolve_stable_commit () {
	local rev=$1 multiline=false line

	git log -n1 --format=format:"%b" $rev | while read line
	do
		if $multiline; then
			echo $line | grep -o $_x40
			case $line in
			*"]")	break ;;
			esac
		fi

		case $line in
		"commit "$_x40" upstream.")	# Greg KH format
			line=${line#commit }
			echo ${line% upstream.}
			break ;;
		"[ Upstream commit "$_x40" ]")	# David M. format
			line=${line#*commit }
			echo ${line% ]}
			break ;;
		"[ Upstream commits "$_x40*)	# David M. format
			echo $line | grep -o $_x40
			multiline=true
			;;
		"(cherry picked from commit "$_x40")")
			line=${line#*commit }
			echo ${line%)}
			break ;;
		esac
	done
}

bug__init () {
	local git_post_rewrite_hook

	kdist__cd_repository kernel &&
	git_post_rewrite_hook="$(git rev-parse --git-dir)/hooks/post-rewrite" &&
	cd - >/dev/null &&

	cp --update "$libhookdir/post-rewrite-hook" "$git_post_rewrite_hook" ||
	die "Failed to install post-rewrite git hook in '$git_post_rewrite_hook'"

	test -f "$git_post_rewrite_hook" ||
	die "post-rewrite git hook is missing, aborting."

	test -x "$git_post_rewrite_hook" ||
	die "post-rewrite bit hook is missing the exec bit, aborting."
}

if test $kdist_subcommand != "import"; then
	bug_db__check
fi
bug__init

kdist__run_subcommand "$@"
