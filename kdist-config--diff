#! /bin/bash

SUMMARY="Show diff between two configs"

USAGE="diff [options]
     ...     diff [options] <file|pattern>
     ...     diff [options] <file|pattern> <file|pattern>

Options:

  -u      show a unified diff instead
  --raw   show raw diff instead
"

sorter=sort

while :
do
	case "$1" in
	-u)
		unified=yes ;;
	--raw)
		raw=yes
		sorter=cat ;;
	-*)
		kdist__usage ;;
	*)
		break
	esac
	shift
done

#
# Sort out the config files to compare
#
#     0: .config <-> <pattern>
#     1: .config <-> <pattern>|<file>
#     2: <pattern>|<file> <-> <pattern>|<file>
#
case $# in
0|1)
	kdist__cd_repository kernel &&
	test -f .config || die ".config is missing."
	two=.config
esac

case $# in
0)
	pat=$(config__read_flavour .config)
	test -n "$pat" || die ".config doesn't have a flavour, you must specify one."
	pat=$(config__read_architecture .config)/$pat
	one=$(config__resolve_files --fullpath "$pat") || exit
	;;
2)
	two=$2
	test -e "$two" || two=$(config__resolve_files --fullpath "$2") || exit
	;&
1)
	one=$1
	test -e "$one" || one=$(config__resolve_files --fullpath "$1") || exit
	;;
*)
	kdist__usage
esac

if test -z "$one"; then
	die "Pattern '${1:-$pat}' gives empty match."
fi
if test -z "$two"; then
	die "Pattern '$2' gives empty match."
fi

#
# unified diff
#
if test $unified; then
	exec diff -u $one $two
fi

#
# diff more readable for human
#
declare -A hash_one
declare -i hash_one_size=0

declare -A hash_two
declare -i hash_two_size=0

#
# First hash all 'one's values
#
init_hash_table () {
	test -r "$2" || die "can't read '$2'"
	test -d "$2" && die "'$2' is a directory"

	while read line
	do
		name=${line##*CONFIG_}
		name=${name%%[ =]*}

		case "$line" in
		"# CONFIG_"*)		val=N ;;
		CONFIG_*=*)		val=${line#*=} ;;
		*)			continue
		esac
		eval $1[$name]='$val'
		eval $1_size+=1
	done <$2
}

init_hash_table hash_one $one &&
init_hash_table hash_two $two ||
exit

#
# Print a change
#
print_one_change () {
	local name=$1 old="${2:-Z}" new="${3:-Z}"

	if test $raw; then
		# raw mode use lower case
		printf "%s\n%s\n%s\n" $name "$old" "$new"
		return
	fi

	printf "%-30s %s --> %s\n" $name "$old" "$new"
}

#
# For each key in one diff with same key in two
#
{
	for k in ${!hash_one[*]}
	do
		old=${hash_one[$k]}
		new=${hash_two[$k]}

		if test "$new" != "$old"; then
			print_one_change $k "$old" "$new"
		fi

		unset "hash_two[$k]"
	done

	#
	# All keys left in two are new stuff
	#
	for k in ${!hash_two[*]}
	do
		print_one_change $k "" ${hash_two[$k]}
	done
} | $sorter
