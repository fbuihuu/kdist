#! /bin/bash

# This is hot path, try to avoid any process forks here,
cve_import__parse_reference () {
	local ref=$1 prev=

	test $sha1 && $is_mainlined &&
	return

	case $ref in
	*:http://*/kernel/git/torvalds/linux-2.6.git\;a=*\;h=*) ;&
	*:http://*/kernel/git/torvalds/linux.git\;a=*\;h=*)
		sha1=${ref##*h=} ;;

	*:http://*/kernel/git/stable/linux-*.git\;a=*\;h=*)
		# sometimes stable tree are used to points to
		# mainlined commits... sigh.
		sha1=${ref##*h=} ;;

	*:http://*/kernel/git/*h=*)
		# maintainers' tree can also be used to point to a
		# commit in mainline.
		sha1=${ref##*h=} ;;

	*:https://github.com/torvalds/linux/commit/*)
		# a github pointer alone seems to be used to point to
		# a stable commit.
		sha1=${ref##*/} ;;
	esac

	while test -n "$sha1"; do
		is_kernel_cve=true

		#
		# sha1 may have some additionnals stuff at the end,
		# such as parent sha1. It can also be a partial prefix
		# of the full 40-byte hexadecimal commit object name.
		#
		sha1=$(expr "$sha1" : "\([[:xdigit:]]\+\)")

		# Check sha1 but update it too since it can be a
		# partial prefix of the full name.
		sha1=$(git rev-parse --verify -q $sha1^{}) || {
			# invalid refs: just ignore them for now, and
			# simply mark the bug as unresolved. There's
			# still the notes that reference the wrong ref.
			break
		}

		# Sometime ref points to commit diff...
		if test $(git cat-file -t $sha1^{}) != commit; then
			break
		fi

		git__is_ancestor master $sha1 &&
		is_mainlined=true &&
		return

		# just loop only once.
		if test $prev; then
			# we shouldn't get there during the 2nd loop
			# because it would mean that a stable commit
			# points wrongly to a commit that's not in
			# mainline.
			warn "stable commit $sha1 points to a non mainline commmit."
			break
		fi

		#
		# Can be a stable commit.  After resolving, if sha1 is
		# null, it means that's a fix which is part of a
		# stable tree but with no ref to mainline. It can
		# happen if the fix has been fixed by rewriting a
		# bunch of code and this changes can't be applied to
		# stable trees.
		#
		prev=$sha1
		sha1=($(bug__resolve_stable_commit $sha1))
		sha1=${sha1[0]}
	done
	sha1=$prev

	case $ref in
	CONFIRM:http://*/kernel/git/*) ;&
	CONFIRM:https://github.com/torvalds/linux/commit/*)
		is_kernel_cve=true
		notes_header="A potential fix can be found in one of the " &&
		notes_header+="maintainer/stable repository:" &&
		notes_urls="${ref#CONFIRM:}${LF}${notes_urls}" ;;
	CONFIRM:http://lkml.org/lkml/*)
		is_kernel_cve=true
		notes_header="No fixes found but the CVE is confirmed on LKML here:" &&
		notes_urls="${ref#CONFIRM:}${LF}${notes_urls}";;
	esac

	# cumulate the urls in case we're interested later.
	case $ref in
	CONFIRM:http*|URL:http*|MLIST:\[linux-kernel\]*)
		notes_urls+="${ref#*:}${LF}" ;;
	esac

	# Last chance to detect a kernel bug if we haven't yet.
	$is_kernel_cve &&
	return

	#
	# *kernel.org* is a too wide pattern that can catch any
	# projects hosted on it (such as git). So narrow down our
	# research a bit.
	#
	case $ref in
	*\[linux-kernel\]*|*/lkml/*|*[lL]inux\ [kK]ernel*|*linux-2.6*)
		is_kernel_cve=true ;;
	*kernel.org/*kernel*)
		is_kernel_cve=true ;;
	esac
}

cve_import__parse_header_end () {
	if test -z "$id"; then
		warn "Incomplete entry at line $lineno, skipping to next entry."
		stat_warnings+=1
		is_kernel_cve=false
		return
	fi

	if test -n "$mapfile"; then
		case $sha1,${resolved_table[$id]} in
		'',*)	sha1=${resolved_table[$id]} ;;
		*,'')	;;
		*,$sha1);;
		*,*)	die "$mapfile and $filename disagree on fix for $id" ;;
		esac
	fi

	if ! test $sha1; then
		: ${notes_header:="No fixes found, these links might be helpful:"}
		notes="${notes_header}${LF}${LF}${notes_urls}"
	fi
	notes_header=
	notes_urls=
}

#
# Parse the cve official list (found at
# http://cve.mitre.org/data/downloads/index.html)
#
separator="======================================================"
skip=false
terminate=false
is_kernel_cve=false

declare -i lineno=0

while read line; do

	lineno+=1

	case $line in
	$separator)
		if $is_kernel_cve; then
			test -n "$id" ||
			die "missing id for CVE line $lineno".

			bug_import__process_one
		fi
		if $terminate; then
			break
		fi
		id=
		url=
		sha1=
		notes=
		is_mainlined=false
		is_kernel_cve=false
		skip=false
		continue
	esac

	if $skip; then
		continue
	fi

	case $line in
	Reference:\ *)
		cve_import__parse_reference "${line#Reference: }" ;;
	Name:\ *)
		test -z "$id" ||
		die "2 name tags found (line $line)"

		stat_total+=1

		id=${line#Name: }
		if ! pattern__is_empty; then
			if pattern__has_match "$id"; then
				is_kernel_cve=true
			else
				skip=true
			fi
			pattern__is_empty && terminate=true
		fi ;;
	URL:\ *)
		url=${line#URL: } ;;
	*:*)
		;; # skip unused tag
	'')
		# end of header, move to the next entry.
		cve_import__parse_header_end
		skip=true ;;
	*)
		warn "Unexpected non tag pattern at line $lineno, skipping to next entry..."
		stat_warnings+=1
		skip=true ;;
	esac

done < <(cat "$filename"; echo $separator)
