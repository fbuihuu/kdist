#! /bin/bash

#
# This can be used either for project or kernel releases. In the
# kernel case, the parent of v3.4.4-1 is v3.4.4, that is the function
# returns a release that was not done by kdist.
#
release__describe () {
	git describe --match=v[[:digit:]].[[:digit:]]\* "$@"
}

release__get_parent () {
	release__describe --abbrev=0 ${1:-HEAD}~1
}

module__list () {
	git submodule foreach -q 'echo $name'
}

# Given a release, return a module sha1 used to create that release.
module__get_sha1 () {
	local line=$(git ls-tree $1 -- $2) &&
	read mode type sha1 unused <<<$line &&
	echo $sha1
}

module__get_desc () (
	sha1=$(module__get_sha1 $1 $2) &&
	kdist__cd_repository $2 &&
	git describe --always --match "v[0-9]*" --abbrev=4 $sha1
)

#
# Returns in lower case the name of the Linux OS distribution name. It
# assumes that /etc/os-release is present.
#
# Now, lsb-release has been obsoleted by os-release (specified
# by the freedesktop standard).
#
runtime__distribution () {
	if test -f /etc/os-release; then
		(source /etc/os-release && echo ${ID,,})
		return
	fi
	warn "/etc/os-release is missing."
}

#
# Helpers for pattern matchings. A list of patterns can be provided
# and used later to check if a string matches any patterns already
# registered. If the pattern is a fixed string and results in a match,
# then this pattern is removed from the list.
#
declare -a __pattern_list

pattern__add () {
	__pattern_list+=("$@")
}

# Process first fixed string patterns so they can be removed from the
# list even if a pattern matches too.
pattern__has_match () {
	local string=$1 i p

	# fixed match ?
	for i in ${!__pattern_list[*]}; do
		p=${__pattern_list[i]}
		if test "$string" = "$p"; then
			unset "__pattern_list[$i]"
			return 0
		fi
	done

	# pattern match ?
	for p in "${__pattern_list[@]}"; do
		if [[ "$string" = $p ]]; then
			return 0
		fi
	done
	return 1
}

pattern__is_empty () {
	test ${#__pattern_list[*]} -eq 0
}

#
# version comparaison helpers
#
__verscmp () {
	[ $1 = $2 ] &&
		return 0

	case $({ echo $1; echo $2; } | sort -V | tail -n1) in
	$1)	return 1 ;;
	$2)	return 2 ;;
	esac
	bug "can't be reached"
}

version__cmp () {
	local i

	for ((i=1 ;; i++))
	do
		x1=$(echo $1 | cut -f$i -d'.')
		x2=$(echo $2 | cut -f$i -d'.')

		# x1 and x2 start with a digit if not null.
		case $x1,$x2 in
		"","")		break ;;
		*,"")		return 1 ;;
		"",*)		return 2 ;;
		$x2,$x1)	continue ;;
		esac

		# Ok versions are different: we're going to return
		# from the function with either 1 or 2 return value.

		# Are those digits are different ?
		: "#############"
		y1=${x1%%-*}
		y2=${x2%%-*}
		case $y1,$y2 in
		$y2,$y1)		;;
		*)			return $(__verscmp $y1 $y2)
		esac

		# deal with the case where rc is before -<digit>
		# 4-rc3
		# 4-rc32
		# 4
		# 4-1-rc3
		# 4-1
		: "#############"
		y1=${x1#*-}
		y2=${x2#*-}
		case $y1,$y2 in
		rc*,[[:digit:]]*)	return 2 ;;
		[[:digit:]]*,rc*)	return 1 ;;
		rc*,rc*)		return $(__verscmp $y1 $y2) ;;
		esac

		# Now we know that both y1 and y2 are either:
		#   4-1
		#   4-1-rc4
		#   4.z
		#   4-1.1
		# Assume that a '-{rc,}<digit>{,.<digit>}' is always
		# the last component of the version num.
		: "#############"
		z1=$(echo ${1%-*} | cut -f$((i+1)) -d'.')
		z2=$(echo ${2%-*} | cut -f$((i+1)) -d'.')
		case $z1,$z2 in
		"","")	;;		# 4-1{-rc2} _vs_ 4-1{-rc4}
		*,"")	return 1 ;;	#       4.z _vs_ 4-1{-rc2}
		"",*)	return 2 ;;	# 4-1{-rc2} _vs_ 4.z
		esac

		case $x1,$x2 in
		*-rc*,*-rc*)	return $(__verscmp $x1 $x2) ;;
		*,$x1-rc*)	return 1 ;;
		$x2-rc*,*)	return 2 ;;
		*)		return $(__verscmp $x1 $x2) ;;
		esac

		# Nerver reached
		bug "can't be reached"
	done

	return 0
}

#
# version__cmp() self tests
#
declare -i self_test_count=0

assert () {
	self_test_count+=1
	echo -n "* self test #$self_test_count... "

	version__cmp $2 $3
	if test $? != $1
	then
		echo -n "failed. [s]kip, [d]ebug, [q]uit ? "
		read
		case $REPLY in
		d)	set -x
			version__cmp $2 $3 ;&
			# fall-through
		q)	exit 1
		esac
	else
		echo ok
	fi
}

assert_greater () { assert 1 $*; }
assert_lesser () { assert 2 $*; }
assert_equal () { assert 0 $*; }

version__cmp_self_tests () {
	assert_greater 2.6.32  2.6.18
	assert_lesser  2.6.18  2.6.40
	assert_greater 3.1.1   3.1.0
	assert_greater 3.1     2.6.33
	assert_equal   3.4.2   3.4.2

	assert_greater 3.1  2.6.44.1
	assert_lesser  2.6  3.1.4

	assert_lesser  3.2.9  3.2.22
	assert_greater 3.33.6 3.9.1

	assert_greater 3.1.30  3.1
	assert_lesser  2.6.30  2.6.30.40

	assert_greater 2.4.5.50-1  2.4.5.8-10
	assert_greater 3.1.30-1    3.1-44
	assert_greater 3.2.1-1.1   3.2-1.1
	assert_greater 3.2.1-1.1   3.2.1-1
	assert_greater 2.4.5.50-1  2.4.5.8-10.3

	assert_equal   3.4 3.4
	assert_lesser  3.4 3.4-1
	assert_greater 3.4 3.4-rc1
	assert_greater 3.4 3.4-rc3-1
	assert_lesser  3.4 3.4-1-rc3

	assert_equal   3.4-1 3.4-1
	assert_greater 3.4-1 3.4-rc1
	assert_greater 3.4-1 3.4-rc3-1
	assert_greater 3.4-1 3.4-1-rc3

	assert_equal   3.4-rc1 3.4-rc1
	assert_lesser  3.4-rc1 3.4-rc3-1
	assert_lesser  3.4-rc1 3.4-1-rc3

	assert_equal   3.4-rc3-1 3.4-rc3-1
	assert_lesser  3.4-rc3-1 3.4-1-rc3

	assert_equal   3.4-1-rc3 3.4-1-rc3

	assert_greater 3.4-rc10-1 3.4-rc3-1
	assert_greater 3.4-rc10-9 3.4-rc3-11
	assert_lesser  3.4-1-rc3  3.4-1-rc10

	assert_greater 3.4.7 3.4-9
	assert_greater 3.4.7 3.4-9-rc3
	assert_greater 3.4.7 3.4-rc3
	assert_greater 3.4.7 3.4-rc3-3
}
