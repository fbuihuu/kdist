#! /bin/bash

USAGE="new [--help] [--config=<version>]"


kernel_tag=
config_tag=
packaging_tag=

while
	case $1 in
	--config=*)	config_tag=${1#--config=} ;;
	"")		break ;;
	*)		usage
	esac
do
	shift
done

kdist__cd_kernel_topdir || exit
kernel_topdir=$(pwd)

#
# HEAD must be on a release commit.
#
kdist__setup_kernel_version
base=$(kdist__make_tag)
kernel_tag=$(git describe --exact-match --match=$base-\* 2>/dev/null) || {
	warn "Your HEAD doesn't point on a released commit."
	exit 1
}

# only warn the user if the working space is dirty.
git__check_clean_work_tree 2>/dev/null ||
warn "warning: kernel repository dirty."

#
# We want the release directory clean
#
kdist__cd_repository
git__check_clean_work_tree releases 2>/dev/null ||
die "You have local changes in the 'releases' subdir of you kdist repo."

#
# For config we use the latest tag matching the kernel tag pattern if
# none has been provided.
#
kdist__cd_repository configs

if ! test $config_tag
then
	# reuse the latest tag maching the kernel tag pattern.
	config_tag=$(kdist tag list -n1 $kernel_tag.\*)
	if test -z "$config_tag"; then
		die "Unable to find a config tag for kernel '$kernel_tag'."
	fi
else
	git rev-parse -q --verify $config_tag >/dev/null ||
	die "Invalid config tag '$config_tag'."
fi

kdist__cd_repository packaging

if ! test $packaging_tag
then
	packaging_tag=$(kdist tag list -n1 $kernel_tag.\*)
	if test -z "$packaging_tag"; then
		die "Unable to find a packaging tag for kernel '$kernel_tag'."
	fi
else
	git rev-parse -q --verify $packaging_tag >/dev/null ||
	die "Invalid config tag '$packaging_tag'."
fi

#
# Now find the release number. It's safe to use sort(1) for finding
# the latest release since there won't be any RC in the release
# naming.
#
kdist__cd_repository releases

prev_release=$(kdist release list --match=${kernel_tag#v}.\*)
if test "$prev_release"
then
	# pick up the latest one
	prev_release=$(echo "$prev_release" | tail -n1)
	next_release=${prev_release%.*}.$((${prev_release##*.}+1))
else
	next_release=${kernel_tag#v}.1
	# find out the previous release done for the specified target.
	prev_release=$(release__previous $next_release)
fi

echo "Making release '$next_release' using the following versions:"
echo
echo "      - kernel    : $kernel_tag"
echo "      - config    : $config_tag"
echo "      - packaging : $packaging_tag"
echo "      - kdist     : $(kdist_version)"
echo
echo "Previous release is '$prev_release'."
echo -n "Continue [Y/n]? "
read yesno
case "$yesno" in
[nN]|[nN][oO])	die "Aborted."
esac

if test -d $next_release; then
	die "Release $next_release already exists."
fi


#
#
#
cleanup_on_exit () {
	rm -rf $tmpdir
}
trap cleanup_on_exit 0

# 'tmpdir' will contain all the generated files.
tmpdir=$(mktemp -d)


if test $prev_release; then
	prev_config_tag=$(kdist release info config $prev_release) &&
	prev_kernel_tag=$(kdist release info kernel $prev_release) &&
	prev_packaging_tag=$(kdist release info packaging $prev_release)
fi ||
exit

#
# Log the changes made on the config files.
#
print_intro () {
	local intro="Changes made since $1:"
	echo "$intro"
	for ((i=1; i < ${#intro}; i++)); do
		echo -n "="
	done
	echo
	echo
}

kdist__cd_repository configs &&

if test $prev_release; then
	echo "Generating config log"
	git log --pretty="%s" $prev_config_tag..$config_tag -- \
		$(kdist__config_version $prev_config_tag)/ \
		$(kdist__config_version $config_tag)/ \
		>$tmpdir/ConfigChanges.log
fi ||
exit

#
# Log the changes made on the packaging files
#
kdist__cd_repository packaging &&

if test $prev_release; then
	echo "Generating packaging log"
	git log --pretty="%s" $prev_packaging_tag..$packaging_tag \
		>$tmpdir/PackagingChanges.log
fi ||
exit

#
# save the version
#
echo "Generating Versions"
cat >$tmpdir/Versions<<EOF
previous-release = $prev_release
kernel = $kernel_tag
config = $config_tag
packaging = $packaging_tag
kdist = $(kdist_version)
EOF

#
# Generate the "whatchanged" report using the previous release. If no
# previous release is found, we still generate an empty file.
#
if test $prev_release; then
	echo "Generating Whatchanged"
	cd $kernel_topdir
	kdist whatchanged $kernel_tag $prev_kernel_tag >$tmpdir/KernelChanges.log
fi ||
exit

# drop the generated logs if empty
cd $tmpdir

if test -s KernelChanges.log; then
	print_intro $prev_kernel_tag >KernelChanges
	cat KernelChanges.log >>KernelChanges
fi

if test -s ConfigChanges.log; then
	print_intro $prev_config_tag >ConfigChanges
	cat ConfigChanges.log >>ConfigChanges
fi

if test -s PackagingChanges.log; then
	print_intro $prev_config_tag >PackagingChanges
	cat PackagingChanges.log >>PackagingChanges
fi

rm -f KernelChanges.log
rm -f ConfigChanges.log
rm -f PackagingChanges.log

# Now track the new files.
kdist__cd_repository releases

mkdir -p $next_release &&
mv $tmpdir/* $next_release &&
git add $next_release &&
git commit -s -m "Release $next_release"
