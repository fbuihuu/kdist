#! /bin/bash

SUMMARY="Build various packages (source, binary, devel...) of different types"

USAGE="<command> [<args>]"


output_directory=
package_type=
package_distrib=

package__init () {
	test -z "$package_distrib" &&
	package_distrib=$(runtime__distribution)

	test -z "$package_distrib" &&
	die "Unknown distribution, try to pass '--distrib' option."

	case $package_distrib in
	mandriva)	package_type=rpm ;;
	*)	die "Your distribution (${package_distrib%%/*}) is currently not supported."
	esac

	case $package_distrib in
	*/*)	;;
	*)	package_distrib+=/default
	esac

	test -d $libexecdir/templates/$package_distrib ||
	die "No templates found for '$package_distrib'"
}

#
# This list the devel files using a given tree object
#
package__list_arch_devel_files () {
	local rev=HEAD

	while
		case $1 in
		--rev=*)	rev=${1#--rev=} ;;
		*)		break
		esac
	do
		shift
	done

	git ls-tree --full-tree -r --name-only $rev -- arch/$1 |
	while read f
	do
		case $f in
		*/include/*)		echo $f ;;
		*/scripts/*)		echo $f ;;
		*/tools/*)		echo $f ;;
		*Kconfig*)		echo $f ;;
		*Kbuild*)		echo $f ;;
		*Makefile*)		echo $f ;;
		*asm-offsets*)		echo $f ;;
		*/syscalls/*)		echo $f ;;
		esac
	done
}

package__list_devel_files () {
	local rev=HEAD

	while
		case $1 in
		--rev=*)	rev=${1#--rev=} ;;
		*)		break
		esac
	do
		shift
	done

	#
	# list source files
	#
	git ls-tree --full-tree --name-only $rev \
		arch/Kconfig \
		kernel/bounds.c

	git ls-tree --full-tree -r --name-only $rev |
	while read f
	do
		# Keep the makefiles in Documentation/ around since
		# they're needed by some generic make commands (such
		# as make mrproper...)
		case $f in
		arch/*)			continue ;;
		tools/include/*)	;;
		tools/*)		continue ;;
		esac

		case $f in
		scripts/*)		echo $f ;;
		include/*)		echo $f ;;
		tools/include/*)	echo $f ;;
		*/scripts/*)		echo $f ;;
		*Kconfig*)		echo $f ;;
		*Kbuild*)		echo $f ;;
		*Makefile*)		echo $f ;;
		esac
	done

	#
	# Hack: Some random files needed by the 'modules_prepare' target.
	#
	#   [1] needed by hostfs (enabled or not) during a make clean.
	#   [2] included by arch/x86/kernel/asm-offsets_32.c.
	#   [3] needed by selinux
	#   [4] needed by selinux
	#
	git ls-tree --full-tree --name-only $rev \
		arch/um/scripts/Makefile.rules \
		security/selinux/include/classmap.h \
		security/selinux/include/initial_sid_to_string.h \
		drivers/lguest/lg.h
}

package__list_output_devel_files () {
	echo .config
	echo Module.symvers
	echo System.map
}

package__show_changelog () {
	local from

	if ! $package_log; then
		return
	fi

	echo "%changelog"
	printf "* %s %s <%s> %s\n" \
		"$(LC_TIME=en_US date +"%a %b %d %Y")" \
		"$(git config --get user.name)"        \
		"$(git config --get user.email)"       \
		$uname_r

	git --no-pager log --pretty="  + %s" --first-parent \
		$(release__get_parent $package_tag)..$package_tag
}

#
# The main function will init the following variables and will call a
# package_xxx helper to generate the specific target package
#
package_name=
package_version=
package_log=false
package_archive=
package_description=
package_tag=
release_source=
release_build=
local_build_release=
src_uname_r=

package__main () {
	local target=$1
	local scmversion=

	kdist__cd_repository kernel &&
	kdist__setup_kernel_version $package_tag &&
	package_version=$KERNEL_VERSION_BASE ||
	exit

	case $target in
	tools/*)
		package_name=${target#tools/} ;;
	'')
		#
		# Using the current .config means that's we're
		# packaging a non official release. In that case
		# force 'release_build' to 0.
		#
		release_build=0

		test -f .config ||
		die ".config is missing."
		flavour=$(config__read_flavour .config)
		package_name=kernel${flavour:+-$flavour} ;;
	*)
		package_name=kernel-$target
	esac

	#
	# If the whole project is clean and pointing on a release
	# then use the tag to find out the release_build number.
	#
	t=$(kdist__cd_topdir && \
	    release__describe --dirty --exact-match 2>/dev/null)

	case $t in
	*-dirty)
		warn -n "Project index is not clean" ;;&
	"")
		warn -n "Packaging non released project" ;;&
	""|*-dirty)
		warn ", forcing build release number to 0."
		release_build=0
		scmversion=$(git__scmversion $package_tag) ;;
	*)
		release_build=${t##*.}
	esac

	#
	# If we package a vanilla kernel, we don't want to include the
	# changelog which can be huge.
	#
	if test $KERNEL_VERSION_PACKAGE; then
		package_log=true
	fi

	#
	# The source package doesn't have a 'build' release num
	# because it would change only if the specfile did, that is
	# mostly never. So to spare one digit for other packages, the
	# 'build' num is merged into the release source one. The
	# downside is that we have to release the source if the
	# specfile changes, but as said previously, that should happen
	# rarely.
	#
	# All other packages includes the source release number *and*
	# a 'build' release number. The latest can change, for
	# example, if the package is rebuilt with a different
	# toolchain, if the specfiles has been modified etc...
	#
	release_source=${KERNEL_VERSION_PACKAGE:-0}$scmversion
	package_archive=$package_name-$KERNEL_VERSION_BASE-$release_source

	case $target in
	source)
		;;
	*)
		# see if the caller want to append a local build release number
		if test "$local_build_release" = yes; then
			test -f .version ||
			die "Missing .version, compile your kernel first."
			local_build_release=.$(< .version)
		fi
		release_build+=$local_build_release
		package_archive+=.$release_build
	esac

	# For binaries target, the exact value will be calculated later.
	src_uname_r=$KERNEL_VERSION$scmversion

	case $target in
	firmware|headers|source|tools/*)
		package_other $target
		return
	esac

	# Generate the list of the config files to use
	case $target in
	'')
		configs=.config ;;
	*)
		config_info__load $target
		package_description=$(config_info__get_description)

		configs=$(kdist config list --fullpath $package_tag/\*/$target) &&
		test -n "$configs" ||
		die "No kernel config file exists for '$target'."
	esac &&

	package_flavour $configs
}


while
	case $1 in
	-*)	kdist__usage ;;
	*)	break
	esac
do
	shift
done

kdist_subcommand=$1
shift
kdist__run_handler "$@"
