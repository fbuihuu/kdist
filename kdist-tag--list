#! /bin/bash

USAGE="list [--help] [--self-tests] [-n<digit>] [-r] [<pattern>]"

#
# Version sort
#
verscmp () {
	if [ $1 = $2 ]
	then
		return 0
	else
		case $({ echo $1; echo $2; } | sort -V | tail -n1) in
		$1)	return 1 ;;
		$2)	return 2 ;;
		esac
	fi
	bug "can't be reached"
}

cmp_kernel_version () {
	local i

	for ((i=1 ;; i++))
	do
		x1=$(echo $1 | cut -f$i -d'.')
		x2=$(echo $2 | cut -f$i -d'.')

		# x1 and x2 start with a digit if not null.
		case $x1,$x2 in
		"","")		break ;;
		*,"")		return 1 ;;
		"",*)		return 2 ;;
		$x2,$x1)	continue ;;
		esac

		# Ok versions are different: we're going to return
		# from the function with either 1 or 2 return value.

		# Are those digits are different ?
		: "#############"
		y1=${x1%%-*}
		y2=${x2%%-*}
		case $y1,$y2 in
		$y2,$y1)		;;
		*)			return $(verscmp $y1 $y2)
		esac

		# deal with the case where rc is before -<digit>
		# 4-rc3
		# 4-rc32
		# 4
		# 4-1-rc3
		# 4-1
		: "#############"
		y1=${x1#*-}
		y2=${x2#*-}
		case $y1,$y2 in
		rc*,[[:digit:]]*)	return 2 ;;
		[[:digit:]]*,rc*)	return 1 ;;
		rc*,rc*)		return $(verscmp $y1 $y2) ;;
		esac

		# Now we know that both y1 and y2 are either:
		#   4-1
		#   4-1-rc4
		#   4.z
		#   4-1.1
		# Assume that a '-{rc,}<digit>{,.<digit>}' is always
		# the last component of the version num.
		: "#############"
		z1=$(echo ${1%-*} | cut -f$((i+1)) -d'.')
		z2=$(echo ${2%-*} | cut -f$((i+1)) -d'.')
		case $z1,$z2 in
		"","")	;;		# 4-1{-rc2} _vs_ 4-1{-rc4}
		*,"")	return 1 ;;	#       4.z _vs_ 4-1{-rc2}
		"",*)	return 2 ;;	# 4-1{-rc2} _vs_ 4.z
		esac

		case $x1,$x2 in
		*-rc*,*-rc*)	return $(verscmp $x1 $x2) ;;
		*,$x1-rc*)	return 1 ;;
		$x2-rc*,*)	return 2 ;;
		*)		return $(verscmp $x1 $x2) ;;
		esac

		# Nerver reached
		bug "can't be reached"
	done

	return 0
}

#
# Self tests
#
declare -i self_test_count=0

assert () {
	self_test_count+=1
	echo -n "* self test #$self_test_count... "

	cmp_kernel_version $2 $3
	if test $? != $1
	then
		echo -n "failed. [s]kip, [d]ebug, [q]uit ? "
		read
		case $REPLY in
		d)	set -x
			cmp_kernel_version $2 $3 ;&
			# fall-through
		q)	exit 1
		esac
	else
		echo ok
	fi
}

assert_greater () { assert 1 $*; }
assert_lesser () { assert 2 $*; }
assert_equal () { assert 0 $*; }

do_self_tests () {
	assert_greater 2.6.32  2.6.18
	assert_lesser  2.6.18  2.6.40
	assert_greater 3.1.1   3.1.0
	assert_greater 3.1     2.6.33
	assert_equal   3.4.2   3.4.2

	assert_greater 3.1  2.6.44.1
	assert_lesser  2.6  3.1.4

	assert_lesser  3.2.9  3.2.22
	assert_greater 3.33.6 3.9.1

	assert_greater 3.1.30  3.1
	assert_lesser  2.6.30  2.6.30.40

	assert_greater 2.4.5.50-1  2.4.5.8-10
	assert_greater 3.1.30-1    3.1-44
	assert_greater 3.2.1-1.1   3.2-1.1
	assert_greater 3.2.1-1.1   3.2.1-1
	assert_greater 2.4.5.50-1  2.4.5.8-10.3

	assert_equal   3.4 3.4
	assert_lesser  3.4 3.4-1
	assert_greater 3.4 3.4-rc1
	assert_greater 3.4 3.4-rc3-1
	assert_lesser  3.4 3.4-1-rc3

	assert_equal   3.4-1 3.4-1
	assert_greater 3.4-1 3.4-rc1
	assert_greater 3.4-1 3.4-rc3-1
	assert_greater 3.4-1 3.4-1-rc3

	assert_equal   3.4-rc1 3.4-rc1
	assert_lesser  3.4-rc1 3.4-rc3-1
	assert_lesser  3.4-rc1 3.4-1-rc3

	assert_equal   3.4-rc3-1 3.4-rc3-1
	assert_lesser  3.4-rc3-1 3.4-1-rc3

	assert_equal   3.4-1-rc3 3.4-1-rc3

	assert_greater 3.4-rc10-1 3.4-rc3-1
	assert_greater 3.4-rc10-9 3.4-rc3-11
	assert_lesser  3.4-1-rc3  3.4-1-rc10

	assert_greater 3.4.7 3.4-9
	assert_greater 3.4.7 3.4-9-rc3
	assert_greater 3.4.7 3.4-rc3
	assert_greater 3.4.7 3.4-rc3-3
}

#
# Main
#
declare -a tags
declare -i max_count
reverse=no

while
	case $1 in
	-n*)
		max_count=${1#-n} ;;
	-r)
		reverse=yes ;;
	--self-tests)
		do_self_tests
		exit ;;
	-*)
		usage ;;
	*)
		break
	esac
do
	shift
done

case $# in
0)	pattern='*' ;;
1)	pattern=$1  ;;
*)	usage
esac



for tag in $(git tag -l "$pattern" | sort -V)
do
	if expr $tag : ".*-[[:digit:]]\+" >/dev/null; then
		tags[${#tags[*]}]=$tag
	fi
done
tags_len=${#tags[*]}

#
# Sort "tags" array using the bubble sort algorithm. It should be ok
# since the array is almost sorted already.
#
if [ -z "$max_count" ] || [ $max_count -gt $tags_len ]; then
	min_index=0
else
	min_index=$((tags_len - max_count))
fi

for ((last=$((tags_len-1)); last >= $min_index; last--)); do
	swaped=no
	for ((i=0; i < last; i++)); do
		j=$((i+1))
		cmp_kernel_version ${tags[i]} ${tags[j]}
		case $reverse,$? in
		no,1|yes,2)
			tmp=${tags[i]}
			tags[i]=${tags[j]}
			tags[j]=$tmp
			swaped=yes
		esac
	done
	[ $swaped = no ] && break
done

for ((i=$min_index; i < $tags_len; i++)); do
	echo ${tags[i]}
done