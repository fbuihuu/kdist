#! /bin/bash


__current_config_name=
__current_config_type=
__current_config_desc=
__current_config_filter=

config_info__load () {
	local Type Description Filter

	test -f "$(kdist__get_repository configs)/$1.info" ||
	die "Huh.. missing info file in 'configs/$1.info'."

	source "$(kdist__get_repository configs)/$1.info" ||
	die "Error while reading config info for '$1'."

	__current_config_name=$1 &&
	__current_config_type=$Type &&
	__current_config_desc=${Description:?"field missing from '$1.info'"} &&
	__current_config_filter="${Filter:-*}"
}

config_info__get_type () {
	echo $__current_config_type
}

config_info__get_name () {
	echo $__current_config_name
}

config_info__get_filter () {
	echo "$__current_config_filter"
}

config_info__get_description () {
	local tmpfile=$(mktemp)

	# Clean up the description by removing repeated empty lines and any
	# empty lines at start and at end.
	echo "$__current_config_desc" | cat -s >$tmpfile
	while test -z "$(sed -ne  1p $tmpfile)"; do sed -ie  1d $tmpfile; done
	while test -z "$(sed -ne \$p $tmpfile)"; do sed -ie \$d $tmpfile; done
	cat $tmpfile; rm -f $tmpfile
}

#
# This ones read/write the data from a single .config file.
#
config__lookup_symbol_quotes () {
	local sym=$1 file=$2
	local line

	line=$(grep "CONFIG_$sym[= ]" "$file") &&
	case $line in
	*"is not set")	;;
	*=*)		echo ${line#*=} ;;
	esac
}

config__lookup_symbol () {
	local val

	val=$(config__lookup_symbol_quotes "$1" "$2") &&
	case $val in
	\"*\")	val=${val#\"}
		val=${val%\"}
	esac &&
	echo "$val"
}

config__set_symbol () {
	local line

	line=$(grep "CONFIG_$2[= ]" "$3") || {
		#
		# symbol doesn't exist: just happen the new value at
		# the end of the file and let kbuild fix this later.
		#
		echo "CONFIG_$2=$1" >>"$3"
		return
	}
	sed -i "s/$line/CONFIG_$2=$1/" "$3"
}

config__unset_symbol () {
	local sym=$1 file=$2

	if ! val=$(config__lookup_symbol_quotes $sym $file); then
		# Symbol is missing
		echo "# CONFIG_$sym is not set" >>"$file"
		return
	fi

	case $val in
	"")	;;
	\"*\")	sed -i "s/CONFIG_$sym=.*/CONFIG_$sym=\"\"/" "$file" ;;
	*)	sed -i "s/CONFIG_$sym=.*/# CONFIG_$sym is not set/" "$file" ;;
	esac
}

config__append_symbol () {
	local old new=$1

	old=$(config__lookup_symbol_quotes $2 "$3")
	case $old in
	"")	# value is not set or doesn't exist yet: 'new' is
		# already initialized.
		;;
	\"*\")
		# append inside the quotes
		new=${old%\"}
		new=$new$1\" ;;
	*)
		warn "trying to append to a no string value for symbol '$2'"
		return
	esac
	config__set_symbol "$new" $2 "$3"
}

config__read_flavour () {
	config__lookup_symbol NAME "$1"
}

config__set_flavour () {
	config__set_symbol "\"$1\"" NAME "$2"
}

config__read_architecture () {
	local arch

	for arch in X86_64 X86_32 ARM; do
		case $(config__lookup_symbol $arch "$1") in
		y)
			case $arch in
			X86_64)		echo x86_64 ;;
			X86_32)		echo i386 ;;
			ARM)		echo arm ;;
			esac
			return
		esac
	done
	warn "Unable to determine the architecture of '$1'"
}
