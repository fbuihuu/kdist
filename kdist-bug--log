#! /bin/bash

SUMMARY="List commits which fix known bugs"

USAGE="[-n<number>|--max-count=<number>] [--format=name|short|medium|compact|full|format:<fmt>] [--cherry-pick|--cherry-mark] <commit>..."

declare -a gitopts

format=short
max_count= # no limit
print_mark=false

while :
do
	case "$1" in
	-h|--he|--hel|--help)
		kdist__usage ;;
	--format=*)
		format=${1#--format=} ;;
	--pretty=*)
		format=${1#--pretty=} ;;
	--oneline)
		format=medium ;;
	-n*)
		max_count=${1#-n} ;;
	--max-count=*)
		max_count=${1#--max-count=} ;;
	--cherry-pick)
		gitopts+=(--cherry-pick --left-right)
		print_mark=true ;;
	--cherry-mark)
		gitopts+=(--cherry-mark --left-right)
		print_mark=true ;;
	--)
		break ;;
	-*)
		gitopts+=("$1") ;;
	*)
		break
	esac
	shift
done

case $# in
0)	set HEAD ;;
esac

kdist__cd_repository kernel

# Pretty print a BUG initially found by bug__query_db()
bug_log__pretty_print () {
	local mark=$1 commit=$2 id
	shift 2

	if $print_mark; then
		# use cherry marks which are nicer IMO.
		case $mark in
		'>')	mark='+' ;;
		'<')	mark='-' ;;
		esac
	else
		mark=
	fi

	case $format in
	name)
		for id; do echo $mark $id; done ;;
	short)
		echo $mark $commit $* ;;
	medium)
		bug_db__query_by_id $1
		echo $mark $commit $bug_sha1 $* ;;
	compact|full)
		test -z "$__pretty_print_first_call" &&
		__pretty_print_first_call=dummy ||
		echo

		echo commit $mark $commit
		kdist --no-pager bug show --format=$format $* ;;
	*)
		# mark is not shown in this case.
		kdist --no-pager bug show --format="$format" $* ;;
	esac

	if test $max_count; then
		let max_count-=1
		test $max_count -eq 0 && exit
	fi

}

cleanup_on_exit () {
	rm -f $tmpfile
}
trap cleanup_on_exit 0

tmpfile=$(mktemp)

#
# We need to treat mainline commits differently than others. Indeed we
# don't wan't to parse the commit message for mainline commits because
# it's useless (since they use annotations) but more important they
# sometime points to another (mainline) commit for some reasons. See
# bc909d9ddbf7778371e36a651d6e4194b1cc7d4c for example, which uses the
# pattern to point to another commit that introduces a bug that the
# given commit fixes.
#
# Therefore we need to figure out (quickly) which set of commits is
# part of mainline or not. To do so, we first generate the list of the
# commits from the given rev spec which are not in mainline and this
# list is used after to detect if a commit is part of mainline or not.
#

#
# Note: this assumes that 'master' is the mainline branch.
#
upstream=master

#
# Generate the list of the local commits and store them in a hash
# table.
#
declare -A local_commits

git log --no-merges --format=format:"%H" "$@" ^$upstream >$tmpfile ||
exit

while read rev; do
	local_commits[$rev]=1
done <$tmpfile

#
# Now generate the list of all commits specified by the given rev spec
# and process mainline commits differently.
#
git log --no-merges "${gitopts[@]}"				\
	--notes=$KDIST_BUG_NOTES_REF				\
	--pretty=format:"%m %H" "$@" | sed -e '/^$/d' |	\
{
	while read mark rev; do
		if ! ids=$(__git_notes show $rev 2>/dev/null); then
			test ${local_commits[$rev]} &&
			ids=$(bug_db__query_by_rev $rev)
		fi
		if test -n "$ids"; then
			bug_log__pretty_print "$mark" $rev $ids
		fi
	done
}
