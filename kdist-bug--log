#! /bin/bash

SUMMARY="List commits which fix known bugs"

USAGE="[-n<number>|--max-count=<number>] [--format=name|short|medium|compact|full|format:<fmt>] [--cherry-pick|--cherry-mark] <commit>..."

declare -a gitopts

format=short
max_count= # no limit
print_mark=false

while :
do
	case "$1" in
	-h|--he|--hel|--help)
		kdist__usage ;;
	--format=*)
		format=${1#--format=} ;;
	--pretty=*)
		format=${1#--pretty=} ;;
	--oneline)
		format=medium ;;
	-n*)
		max_count=${1#-n} ;;
	--max-count=*)
		max_count=${1#--max-count=} ;;
	--cherry-pick)
		cherry_opts="--cherry-pick --left-right" ;;
	--cherry-mark)
		cherry_opts="--cherry-mark --left-right" ;;
	--)
		break ;;
	-*)
		gitopts+=("$1") ;;
	*)
		break
	esac
	shift
done

case $# in
0)	set HEAD ;;
esac

kdist__cd_repository kernel

# Pretty print a BUG initially found by bug__query_db()
bug_log__pretty_print () {
	local mark=$1 commit=$2 id mainline=
	shift 2

	if $print_mark; then
		# use cherry marks which are nicer IMO.
		case $mark in
		'>')	mark='+' ;;
		'<')	mark='-' ;;
		esac
	else
		mark=
	fi

	case $format in
	name)
		for id; do echo $mark $id; done ;;
	short)
		echo $mark $commit $* ;;
	medium)
		#
		# Search for the corresponding mainline commit if
		# any. If 'commit' fixes a group of bugs, then we
		# assume that its mainline counterpart will too.
		#
		for fix in $(bug_db__find_all_fixes $1); do
			if git__is_ancestor master $fix; then
				mainline=$fix
				break
			fi
		done
		echo $mark $commit ${mainline:-$commit} $* ;;
	compact|full)
		test -z "$__pretty_print_first_call" &&
		__pretty_print_first_call=dummy ||
		echo

		echo commit $mark $commit
		kdist --no-pager bug show --format=$format $* ;;
	*)
		# mark is not shown in this case.
		kdist --no-pager bug show --format="$format" $* ;;
	esac

	if test $max_count; then
		let max_count-=1
		test $max_count -eq 0 && exit
	fi

}

#
# Note: this assumes that 'master' is the mainline branch.
#
upstream=master

#
# cache the path of the bug revisions db.
#
db_rev_path=$(bug_db__rev_path)

#
# Cherry pick mode: we need a separate case since filtering out
# mainline commits (done by loop #1) doesn't work for revs range
# including mainline such as "v3.5-rc1...v3.4.6".
#
# There's one canveat though, mainline commits are treated like others
# one meaning that their message will be parsed too. For simplicity,
# we do it anyway.
#
if test -n "$cherry_opts"; then
	print_mark=true

	git log --no-merges $cherry_opts "${gitopts[@]}"	\
		--pretty=format:"%m %H" "$@" |			\
	{
		while read mark rev; do
			ids=
			revs=$(bug__resolve_stable_commit $rev)

			for r in ${revs:-$rev}; do
				path=$db_rev_path/${r::2}/${r:2} &&
				test -f $path &&
				ids+="$(< $path) "
			done

			test -n "$(echo $ids)" &&
			bug_log__pretty_print "$mark" $rev $ids
		done
	}
	return
fi

#
# Process commits which has been backported (cherry-picked) from
# mainline first. They normally have the reference to their mainline
# counterpart in their message. Those commits are obviously not in
# mainline.
#
# This split is not only done to avoid useless commit message parsing
# for mainline commits but sometimes mainline commits point to other
# mainline ones, see bc909d9ddbf7778371e36a651d6e4194b1cc7d4c for an
# example.
#
# Note: the loop uses an inlined version of bug_db__query_by_rev()
# which makes the loop 10 times faster !
#
git log --no-merges "${gitopts[@]}"				\
	--pretty=format:"%m %H" "$@" ^$upstream |		\
{
	while read mark rev; do
		#
		# This assumes that commits pointing to upstream fixes
		# are more common than local fixes.
		#
		revs=$(bug__resolve_stable_commit $rev)
		if test -z "$revs"; then
			# not a backported fix, the second loop will
			# see if it's a 'local' fix.
			continue
		fi

		ids=
		for r in $revs; do
			path=$db_rev_path/${r::2}/${r:2} &&
			test -f $path &&
			ids+="$(< $path) "
		done

		test -n "$(echo $ids)" &&
		bug_log__pretty_print "$mark" $rev $ids
	done
}

#
# Now process commits without parsing the commit message since commits
# having indirect reference in their messages have been proceed
# before.
#
# Note: the loop uses an inlined version of bug_db__query_by_rev()
# which makes the loop 10 times faster !
#
git log --no-merges "${gitopts[@]}"				\
	--pretty=format:"%m %H" "$@" |				\
{
	while read mark rev; do
		path=$db_rev_path/${rev::2}/${rev:2} &&
		test -f $path &&
		bug_log__pretty_print "$mark" $rev $(< $path)
	done
}
