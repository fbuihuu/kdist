#! /bin/bash
#
# This helper is used to update a kernel configuration with minimum
# user interventions. It uses values found in a template when a symbol
# needs to be resolved. If the value cannot be determined then it asks
# for to the user.
#
# For example, after upgrading the desktop config for x86_64
# architecture, you can use this script to update the i586 desktop
# since a lot of new configurations will be the same. You'll be
# prompted for i586 specific symbol values only.
#
USAGE="upgrade [--template=<file>] <type> [<from>]"

declare -a targets
template=.config

while
	case $1 in
	--template=*)	template=$(readlink -f ${1#--template=}) ;;
	-*)		usage ;;
	*)		break
	esac
do
	shift
done

case $# in
1|2)	;;
*)	usage
esac

type=$1

kdist__cd_kernel_topdir &&
kdist__setup_kernel_version ||
exit

#
#
#
cleanup_on_exit () {
	rm -rf $tmpdir
}
trap "cleanup_on_exit" 0

tmpdir=$(mktemp -d)

#
# Retrieve the config files to be upgraded.
#
kdist__cd_repository configs

to=$(kdist__config_version $KERNEL_VERSION_BASE)
case $# in
1)
	# pickup the previous config version
	from=$({ echo $to; ls -1; } | sort -V | uniq | grep -B1 $to)
	case $(echo "$from" | wc -l) in
	2)	from=$(echo "$from" | head -1) ;;
	*)	die "No previous version found to upgrade from."
	esac
	echo "Upgrading from 'v$from'" ;;
2)
	from=$(kdist__config_version $2)
	test -d $from ||
	die "Unknown version '$2'."
esac

for src in $(config__ls_files --type=$type "$from/*/*")
do
	dst=${src/#$from/$to}

	test -f $dst &&
	die "That would overwrite the following file: '$dst'."

	mkdir -p $(dirname $tmpdir/$dst)
	cp $src $tmpdir/$dst
	targets+=("$dst")
done

test ${#targets[*]} -gt 0 ||
die "No config files with '$type' type found for version '$from'."

# go back to the kernel directory
cd - >/dev/null

kdist config update --template=$template "${targets[@]/#/$tmpdir/}" ||
exit

#
# Finally move the new confiles in the config repository.
#
kdist__cd_repository configs
rsync -a $tmpdir/ . &&
for config in "${targets[@]}"; do
	git add $config
done
