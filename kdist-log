#! /bin/bash

SUMMARY="Show what changed between releases"

USAGE="[-v] [--all] [--since=<since>] [--no-kept] [<git-log opts>] [<rev>] [-- <module>]"

declare -a logs
declare -a gitopts
all=false
modules=
since=
until=HEAD
kept_opt=

while :
do
	case "$1" in
	-v|--verbose)
		verbose=yes ;;
	-h|--he|--hel|--help)
		kdist__usage ;;
	--all)
		all=true ;;
	--since=*)
		since=${1#--since=} ;;
	--no-kept)
		kept_opt=--no-kept ;;
	--)
		break ;;
	-*)
		gitopts+=("$1") ;;
	*)
		break
	esac
	shift
done

case $# in
0)
	modules=project ;;
1)
	until=$1
	modules=project ;;
2|3)
	case $1,$2 in
	--,*)	modules=$2 ;;
	*,--)	until=$1; modules=$3;;
	*)	kdist__usage;;
	esac ;;
*)
	kdist__usage
esac


kdist__cd_topdir

git rev-parse --verify -q $until^{} >/dev/null ||
die "revision '$until' is invalid."

if test -z "$since"; then
	since=$(release__get_parent $until) ||
	die "kdist-log failed to retrieve a parent release."
fi

if $all; then
	modules="project $(module__list) bugs"
fi

log_kernel () (
	u=$(module__get_sha1 $until kernel) &&
	s=$(module__get_sha1 $since kernel) ||
	return

	kdist__cd_repository kernel
	tag_u=$(release__describe $u) &&
	tag_s=$(release__describe $s) ||
	return

	#
	# Specify unconditionnaly 'upstream' and 'limit'. They will be
	# ignored if they're ancestors of merge-base(u,s).
	#
	kdist whatchanged $kept_opt --header \
		$s $u ${tag_u%-*} ${tag_s%-*} 2>/dev/null
)

log_bugs () {
	u=$(module__get_sha1 $until kernel) &&
	s=$(module__get_sha1 $since kernel) ||
	return

	bugs="$(kdist bug log --cherry-pick --format=short $s...$u)"
	test -z "$bugs" &&
	return

	count=$(echo "$bugs" | cut -f3- -d" " | wc -w)
	printf "* Kernel bugs fixed since $since: (%d)\n" $count
	while read line; do
		echo "  $line"
	done <<< "$bugs"
}

log_configs () {
	git diff --submodule $since $until -- configs |
	sed -e "1s/^Submodule/\*/"
}

log_kdist () {
	tag_u=$(module__get_desc $until kdist) &&
	tag_s=$(module__get_desc $since kdist) ||
	return

	git diff --submodule $since $until -- kdist |
	sed -e "1s/^Submodule.*/* kdist $tag_s..$tag_u/"
}

log_packaging () {
	git diff --submodule $since $until -- packaging |
	sed -e "1s/^Submodule/\*/"
}

log_project () {
	echo "* Project $since..$(git describe --always $until)"
	git log --pretty=tformat:"  > %s" $since..$until
}

for m in $modules
do
	case $(type -t log_$m) in
	function)
		logs+=("$(log_$m)") || exit ;;
	*)
		die "Unkown module '$m'"
	esac
done

for i in ${!logs[*]}
do
	if test -n "${logs[$i]}"; then
		[ $i -gt 0 ] && echo
		echo "${logs[$i]}"
	fi
done
