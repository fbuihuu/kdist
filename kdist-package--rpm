#! /bin/bash

USAGE="[--format=rpm] [-v] [--show-spec|--annotate-spec] [--spec=<specfile>] [--output-dir|-o <dir>] [--with=...] [--without=...] [source|headers|firmware|tools/<name>]

   source            Package the kernel sources
   headers           Package the kernel header files
   firmware          Package the firmware
   tools/<name>      Package a named kernel tool

   --output-dir      Use <dir> to store the resulting files
   --show-spec       Show the generated spec file and exit
   --annontate-spec  Show the generated spec file with annotations and exit
   --spec            Specify the .spec file to use

   --with=...        Pass with conditionnals to generate the rpm package
   --without=...     Pass without conditionnals to generate the rpm package
"

source $libexecdir/kdist-package--rpm-common

package_source () {
	say "Extracting kernel $src_uname_r source code"
	kdist package --format=tar -q --prefix=$package_archive/ -j \
		-o $SOURCES/$package_archive.tar.bz2 source &&
	show_spec source >$SPECS/$package_name.spec &&
	rpm__rpmbuild -bb $SPECS/$package_name.spec
}

package_other () {
	if test $spec_only; then
		show_spec $1
		return
	fi
	if test $1 = source; then
		package_source
		return
	fi
	show_spec $1 >$SPECS/$package_name.spec &&
	rpm__rpmbuild --define "_builddir $(pwd)" -bb $SPECS/$package_name.spec
}

#
# We can't have a build release number included in the kernel release
# name (uname -r) since we would have to recompile the kernel and we
# want to avoid that since we don't know how the user did
# it. Therefore the build release number is only part of the package
# name.
#
package_flavour () {
	rpm_exclusive=$(config__read_architecture $1)

	uname_r=$(make -s ARCH=$rpm_exclusive kernelrelease)

	if test $spec_only; then
		show_spec
		return
	fi

	case $rpm_exclusive in
	x86_64)		asmarch=x86 ;;
	i386)		asmarch=x86 ;;
	arm*)		asmarch=arm ;;
	esac

	say "Generating devel-file list for '$asmarch' architecture" &&
	package__list_devel_files >$SOURCES/${uname_r}-develfiles.list &&
	package__list_output_devel_files >$SOURCES/${uname_r}-output-develfiles.list &&
	package__list_arch_devel_files $asmarch >$SOURCES/${uname_r}-$asmarch-develfiles.list ||
	return

	# we setup '_builddir' and 'package_archive' in order to have
	# a not too bad debuginfo package. Indeed 'comp_dir' can't be
	# rewritten completely due to the broken debugedit crap tool,
	# but only a part of it. So we have to keep at least the last
	# path component, which is the current directory. Oh well...
	package_archive=$(basename $(pwd))
	show_spec >$SPECS/$package_name.spec &&
	rpmbuild --nobuild $SPECS/$package_name.spec &&
	rpm__rpmbuild --define "_builddir $(dirname $(pwd))" -bb $SPECS/$package_name.spec
}

#
# Main
#
no_source=0
spec_only=

# By default, we don't want those sub packages.
rpm__add_bconds --without=doc
rpm__add_bconds --without=devel
rpm__add_bconds --without=debuginfo

while
	case $1 in
	-v|--verbose)
		verbose=yes ;;
	--show-spec)
		spec_only=yes ;;
	--annotate-spec)
		spec_only=yes
		rpm_annotate_spec=true ;;
	--spec=*)
		rpm_specfile=${1#*=} ;;
	--with=*|--without=*)
		rpm__add_bconds $1 ;;
	-o)
		shift
		rpm__set_output_directory "$1" || exit ;;
	--output-dir=*)
		rpm__set_output_directory "${1#*=}" || exit ;;
	-*)
		usage ;;
	*)
		break
	esac
do
	shift
done

if test $# -gt 1; then
	usage
fi

case $1 in
firmware|headers|source|tools/*)
	;;
'')
	#
	# FIXME: it would be nice to check that the kernel has been
	# compiled and vmlinux is uptodate.
	#
	local_build_release=yes ;;
*)
	usage
esac

rpm__init &&
package__main $1
