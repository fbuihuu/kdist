#! /bin/bash

verbose=no
say () {
	if test $verbose = yes; then
		echo >&2 "$@"
	fi
}

die () {
	echo >&2 "$@"
	exit 1
}

warn () {
	echo >&2 "$@"
	return 1
}

bug () {
	die "BUG in ${FUNCNAME[1]}: $@"
	exit 2
}

#
# kdist general stuff
#

kdist__restricted_mode() {
	case $KDIST_RESTRICTED_MODE in
	"")	bug "called too early" ;;
	no)	false ;;
	yes)	true ;;
	esac
}

kdist__version() (
	local version

	# file used in tarball realeases
	if test -f kdist-version; then
		cat kdist-version
		return
	fi

	cd $(dirname $0)

	if ! test -e .git; then
		echo $KDIST_VERSION
		return
	fi

	git describe --dirty --match "v[0-9]*" --abbrev=4 2>/dev/null ||
	echo $KDIST_VERSION
)

__run_script () {
	local path=$libexecdir/$1

	shift

	if ! test -r $path; then
		case $KDIST_RESTRICTED_MODE in
		yes)	hint=" (restricted mode)" ;;
		no)	hint= ;;
		esac
		die "'${kdist_subcommand:-$kdist_command}': command not found$hint."
	fi

	# The ( ) construct here is used to workaround a bash 4.2 bug:
	# it's used to make sure that trap handlers are called.
	case $use_pager in
	yes)	( source $path "$@" ) | kdist__pager ;; # pipefail is set by default
	*)	  source $path "$@"
	esac
}

kdist__run_command () {
	case $kdist_command in
	log|whatchanged)	: ${use_pager:=yes} ;;
	'')			kdist__usage ;;
	esac

	__run_script kdist-$kdist_command "$@"
}

kdist__run_subcommand () {
	case $kdist_command,$kdist_subcommand in
	config,diff)		: ${use_pager:=yes} ;;
	release,list)		: ${use_pager:=yes} ;;
	bug,log)		: ${use_pager:=yes} ;;
	bug,show)		: ${use_pager:=yes} ;;
	bug,list-db)		: ${use_pager:=yes} ;;
	*,)			kdist__usage ;;
	esac

	__run_script kdist-$kdist_command--$kdist_subcommand "$@"
}

kdist__pager() {
	if test -t 1
	then
		export LESS=${LESS--FRSXi}
		${KDIST_PAGER:-${PAGER:-less}} "$@"
	else
		cat "$@"
	fi
}

kdist__editor () {
	${KDIST_EDITOR:-${VISUAL:-${EDITOR:-vi}}} "$@"
}

# arch names used by kdist paths.
kdist__architecture () {
	local arch="$1"
	case $arch in
	i?86)		arch=x86_32 ;;
	esac
	echo "$arch"
}

# version numbers used by kdist paths.
kdist__config_version () {
	local v=${1#v}
	case $v in
	2.6.*)	v=$(expr "$v" : "\(2.6.[0-9]\+\).*") ;;
	*)	v=$(expr "$v" : "\([0-9]\+\.[0-9]\+\).*")
	esac &&
	echo "$v" ||
	echo "$1"
}

#
# Kdist repository management
#
kdist__check_project () {
	[ -d "$1"/configs ] && [ -d "$1"/kernel ] && [ -d "$1"/kdist ] && \
	[ -d "$1"/.git ] && [ -f "$1"/.gitmodules ]
}

kdist__get_topdir () (
	until kdist__check_project .
	do
		cd .. && git__cd_topdir ||
		die "No kdist project found."
	done
	pwd
)

kdist__get_repository () {
	p=$(kdist__get_topdir) &&
	readlink -e "$p/$1" || exit
}

kdist__cd_topdir () {
	p=$(kdist__get_topdir) &&
	cd "$p" || exit
}

kdist__cd_repository () {
	p=$(kdist__get_repository $1) &&
	cd "$p" || exit
}

#
# This function returns the kernel version details throught several
# KERNEL_VERSION_xxx variables
#
kdist__setup_kernel_version () {
	local rev=${1:-HEAD}
	local VERSION PATCHLEVEL SUBLEVEL

	#
	# KERNEL_VERSION is the kernel version given by "make
	# kernelversion". Therefore it's not the same as the version
	# given by 'uname -r' since it doesn't have the auto local
	# version stuff for example.
	#
	# Note: "make kernelversion" is not used since we want to
	# retreive the kernel version for any revs and "make
	# kernelversion" needs more than the topdir Makefile.
	#

	# warm up...
	git show $1:Makefile >/dev/null || exit

	while read line; do
		eval $line
	done < <(git show $1:Makefile | head -n4 | tr -d ' ')

	KERNEL_VERSION+=${VERSION}
	KERNEL_VERSION+=${PATCHLEVEL:+.$PATCHLEVEL}
	KERNEL_VERSION+=${SUBLEVEL:+.$SUBLEVEL}
	KERNEL_VERSION+=${EXTRAVERSION}

	#
	# Extract the package num version if any. The package num
	# always starts with a '-' sign. Note that -rcX doesn't match
	# the pattern.
	#
	KERNEL_VERSION_PACKAGE=$(expr $KERNEL_VERSION : ".*-\([0-9]\+\)")

	#
	# KERNEL_VERSION_BASE is the kernel version without the
	# package version stuff.
	#
	KERNEL_VERSION_BASE=${KERNEL_VERSION%-$KERNEL_VERSION_PACKAGE}
}

#
# uname -r
#
kdist__setup_kernel_release () {

	: ${KERNEL_VERSION:?"is not set in kdist__setup_kernel_release()."}

	#
	# Start oldconfig first so if the .config is not uptodate, the
	# next call to it through kernelrelease target will be quiet.
	#
	make -s silentoldconfig &&
	KERNEL_RELEASE=$(make -s kernelrelease) ||
	return

	#
	# Retrieve the localversion (LOCALVERSION + scm + NAME)
	#
	KERNEL_VERSION_LOCAL=${KERNEL_RELEASE#$KERNEL_VERSION}
}

kdist__make_tag () {
	[ $KERNEL_VERSION ] ||
		bug "kernel version is not set"

	# the 2.x.x -> 3.x transition has been painfull
	echo v$KERNEL_VERSION_BASE | \
	sed -re "s/v(3\.[[:digit:]]+)(\.0)(.*)/v\1\3/" -e "s/.*/&${1:+-$1}/"
}

#
# Include all other libs now
#
for lib in $(ls -B $libexecdir/kdist--lib-* 2>/dev/null); do
	case $(basename $lib) in
	*~*)	continue ;;
	esac
	source $lib || exit
done
