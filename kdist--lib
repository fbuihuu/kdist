#! /bin/bash

verbose=no
say () {
	if test $verbose = yes; then
		echo >&2 "$@"
	fi
}

die () {
	echo >&2 "$@"
	exit 1
}

warn () {
	echo >&2 "$@"
	return 1
}

bug () {
	die "BUG in ${FUNCNAME[1]}: $@"
	exit 2
}

usage () {
	die "$(basename $0) $kdist_command $USAGE"
}

#
# kdist general stuff
#

kdist__pager() {
	if test -t 1
	then
		: ${LESS=-FRSXi}
		export LESS
		${KDIST_PAGER:-${PAGER:-less}} "$@"
	else
		cat "$@"
	fi
}

kdist__editor () {
	${KDIST_EDITOR:-${VISUAL:-${EDITOR:-vi}}} "$@"
}

# arch names used by kdist paths.
kdist__architecture () {
	local arch="$1"
	case $arch in
	i?86)		arch=x86_32 ;;
	esac
	echo "$arch"
}

# version numbers used by kdist paths.
kdist__config_version () {
	local v=${1#v}
	case $v in
	2.6.*)	v=$(expr "$v" : "\(2.6.[0-9]\+\).*") ;;
	*)	v=$(expr "$v" : "\([0-9]\+\.[0-9]\+\).*")
	esac &&
	echo "$v" ||
	echo "$1"
}

#
# Kdist repository management
#
kdist__check_project () {
	[ -e "$1"/configs/.git ] && [ -e "$1"/kernel/.git ] &&
	[ -e "$1"/kdist/.git ] && [ -d "$1"/.git ] && [ -f "$1"/.gitmodules ]
}

kdist__cd_topdir () {
	until kdist__check_project .
	do
		cd .. && git__cd_topdir ||
		die "No kdist project found."
	done
}

kdist__cd_repository () {
	{ kdist__cd_topdir && cd $1; } || exit
}

kdist__get_repository () {
	(kdist__cd_repository $1 && pwd) || exit
}

kdist__check_kernel () (
	[ -d scripts ] && [ -d scripts/kconfig ] &&
	[ -d arch ] && [ -d arch/x86 ] &&
	[ -r Makefile ] &&
	[ -e .git ] ||
	warn "Invalid kernel directory: $(pwd -P)"
)

# FIXME: must be removed
kdist__cd_kernel_topdir () {
	kdist__cd_repository kernel
	git__check_inside_worktree && # FIXME: this function is useless
	kdist__check_kernel 2>/dev/null ||
	warn "You must be inside a kernel repository."
}

#
# This function returns the kernel version details throught several
# KERNEL_VERSION_xxx variables
#
kdist__setup_kernel_version () {
	local rev=${1:-HEAD}
	local VERSION PATCHLEVEL SUBLEVEL

	#
	# KERNEL_VERSION is the kernel version given by "make
	# kernelversion". Therefore it's not the same as the version
	# given by 'uname -r' since it doesn't have the auto local
	# version stuff for example.
	#
	# Note: "make kernelversion" is not used since we want to
	# retreive the kernel version for any revs and "make
	# kernelversion" needs more than the topdir Makefile.
	#

	# warm up...
	git show $1:Makefile >/dev/null || exit

	while read line; do
		eval $line
	done < <(git show $1:Makefile | head -n4 | tr -d ' ')

	KERNEL_VERSION+=${VERSION}
	KERNEL_VERSION+=${PATCHLEVEL:+.$PATCHLEVEL}
	KERNEL_VERSION+=${SUBLEVEL:+.$SUBLEVEL}
	KERNEL_VERSION+=${EXTRAVERSION}

	#
	# Extract the package num version if any. The package num
	# always starts with a '-' sign. Note that -rcX doesn't match
	# the pattern.
	#
	KERNEL_VERSION_PACKAGE=$(expr $KERNEL_VERSION : ".*-\([0-9]\+\)")

	#
	# KERNEL_VERSION_BASE is the kernel version without the
	# package version stuff.
	#
	KERNEL_VERSION_BASE=${KERNEL_VERSION%-$KERNEL_VERSION_PACKAGE}
}

#
# uname -r
#
kdist__setup_kernel_release () {

	: ${KERNEL_VERSION:?"is not set in kdist__setup_kernel_release()."}

	#
	# Start oldconfig first so if the .config is not uptodate, the
	# next call to it through kernelrelease target will be quiet.
	#
	make -s silentoldconfig &&
	KERNEL_RELEASE=$(make -s kernelrelease) ||
	return

	#
	# Retrieve the localversion (LOCALVERSION + scm + NAME)
	#
	KERNEL_VERSION_LOCAL=${KERNEL_RELEASE#$KERNEL_VERSION}
}

kdist__make_tag () {
	[ $KERNEL_VERSION ] ||
		bug "kernel version is not set"

	# the 2.x.x -> 3.x transition has been painfull
	echo v$KERNEL_VERSION_BASE | \
	sed -re "s/v(3\.[[:digit:]]+)(\.0)(.*)/v\1\3/" -e "s/.*/&${1:+-$1}/"
}

version__is_released () {
	expr $1 : ".*-\([1-9][0-9]\+\)" >/dev/null
}

#
# Include all other libs now
#
for lib in $libexecdir/kdist--lib-*; do
	source $lib || exit
done