#! /bin/bash

SUMMARY="Create a kdist project"

USAGE="[--kernel=<repository>] [--configs=<repository>] [--kdist=<repository>] [--packaging=<repository>] [--bugs=<repository>] <path>"

declare -A repositories
declare -A default_repositories=(
	[kernel]=git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
	[kdist]=git://github.com/fbuihuu/kdist.git
)

while :
do
	case $1 in
	--configs=*)	repositories[configs]=${1#--configs=} ;;
	--kernel=*)	repositories[kernel]=${1#--kernel=} ;;
	--kdist=*)	repositories[kdist]=${1#--kdist=} ;;
	--packaging=*)	repositories[packaging]=${1#--packaging=} ;;
	--bugs=*)	repositories[bugs]=${1#--bugs=} ;;
	-*)		kdist__usage ;;
	*)		break
	esac
	shift
done

case $# in
1)	destination=$1 ;;
*)	kdist__usage
esac

# Prompt if a repo is missing. 'packaging' and 'bugs' are optional.
for m in kernel configs kdist
do
	test -n "${repositories[$m]}" && continue

	REPLY=
	default=${default_repositories[$m]}
	case $default in
	"")
		until [ -n "$REPLY" ]; do
			read -p "Enter the location of ${m}'s repository: "
		done ;;
	*)
		echo "Enter the location of ${m}'s repository"
		read -p "[$default]: "
	esac
	repositories[$m]=${REPLY:-$default}
done

#
# Barf if the destination directory already exists
#
if test -d "$destination"; then
	die "Destination path '$destination' already exists."
fi
destination=$(readlink -f "$destination")

#
# Be sure to exit from the 'destination' directory when cleaning.
#
cleanup_on_failure () {
	rm -fr $destination
}
trap cleanup_on_failure 0

#
# Create the new repository tracked by git.
#
mkdir $destination &&
cd $destination &&
git init -q ||
exit

# Create the initial commit: for now it contains only an empty
# .gitignore file. An initial commit is needed so that the repo has at
# least a defined HEAD and branch otherwise most of the log commands
# won't work at all.
>.gitignore &&
git add .gitignore &&
git commit -q -s -m "Project creation" ||
die "Failed to create initial commit."

# Add mandatory submodules
for m in kdist configs kernel; do
	git submodule add ${repositories[$m]} $m ||
	exit
done

# Add optional ones
for m in packaging bugs; do
	test -z "${repositories[$m]}" &&
	continue

	git submodule add ${repositories[$m]} $m ||
	exit
done

# Be sure we haven't missed anything.
kdist__check_project . ||
bug "Failed to verify the project's layout."

# Init hooks.
kdist__init_hooks

# At this point errors are no more fatal.
trap - 0

echo
echo "You're project has been initialized and ready to be committed."
echo "Please make sure that all submodules are currently using the"
echo "right branches you want to start with. If that's not the case"
echo "fix it and then commit the initial state."
echo
git submodule status
