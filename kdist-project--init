#! /bin/bash

SUMMARY="Create a kdist project"

USAGE="create --kernel=<kernel-repository> --configs=<configs-repository> --kdist=<kdist-repository> <path>"

config_repo=
kernel_repo=
kdist_repo=

while :
do
	case $1 in
	--kernel=*)	kernel_repo=${1#--kernel=} ;;
	--configs=*)	config_repo=${1#--configs=} ;;
	--kdist=*)	kdist_repo=${1#--kdist=} ;;
	-*)		kdist__usage ;;
	*)		break
	esac
	shift
done

case $# in
1)	destination=$1 ;;
*)	kdist__usage
esac

# Prompt if a repo is missing
for r in kernel_repo config_repo kdist_repo; do
	case ${!r} in
	"") read -p "Enter the location of ${r%_repo}'s repository: " $r
	esac
done

#
# Barf if the destination directory already exists
#
if test -d "$destination"; then
	die "Destination path '$destination' already exists."
fi
destination=$(readlink -f "$destination")

#
# Be sure to exit from the 'destination' directory when cleaning.
#
cleanup_on_failure () {
	rm -fr $destination
}
trap cleanup_on_failure 0

#
# Create the new repository tracked by git.
#
mkdir $destination &&
cd $destination &&
git init -q &&
git submodule add $kdist_repo kdist &&
git submodule add $config_repo configs &&
git submodule add $kernel_repo kernel ||
exit

# Be sure we haven't missed anything.
kdist__check_project . ||
bug "Failed to verify the project's layout."

# At this point errors are no more fatal.
trap - 0

echo
echo "You're project has been initialized and ready to be committed."
echo "Please make sure that all submodules are currently using the"
echo "right branches you want to start with. If that's not the case"
echo "fix it and then commit the initial state."
echo
git submodule status
