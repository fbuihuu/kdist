#! /bin/bash

SUMMARY="Generate variaus source tar archives"

USAGE="[-q] [-z|-j] [--prefix=<prefix>] [--output-dir|-o <dir>] [-r <rev>] source|headers|devel|firmware|tools

   source            Create a tarball of the kernel source
   headers           Create a tarball of the kernel headers
   devel             Create a tarball of the kernel devel files
   firmware          Create a tarball of all firmware
   tools             Create a tarball of all kernel analysis tools

    --prefix         Prepend <prefix>/ to each filename in the archive
    -r               Specify the revision to archive
    -z               Create a tar.gz instead of a bare .tar
    -j               Create a tar.bz2 instead of a bare .tar
    -o               Use <dir> to store the resulting files
    -q               Be quiet
"

#
# Note: Put shopt here rather than inside the subshells using the
# extglob feature. Explanations are given by:
# http://www.mail-archive.com/bug-bash@gnu.org/msg10613.html
#
shopt -s extglob

extract_source () {
	git archive --format=tar --prefix=$prefix $rev | tar -C $1 -xf - &&
	#
	# Since the kernel.tar won't have the git repository for
	# generating the localversion stuff, we generate .scmversion
	# file containing its value so Kbuild can figure it out later.
	#
	echo -n $(git__scmversion $rev) >$1/$prefix/.scmversion
}

package_source () {
	extract_source $tmpdir &&
	tar -C $tmpdir -cf - ${prefix:-.}
}

package_headers () (
	extract_source $tmpdir &&
	#
	# Get rid of the unused files not involved during headers
	# installation process.
	#
	cd $tmpdir/ && (
		cd ${prefix:-.}
		rm -rf block crypto drivers firmware fs init ipc
		rm -rf kernel lib mm net samples security sound
		rm -rf tools/!(include) usr virt Documentation
	)
	tar -cf - ${prefix:-.}
)

# Firmware is not arch specific, therefore it can be run on every
# possible architectures.
package_firmware () (
	extract_source $tmpdir &&
	#
	# Get rid of the unused files not involved during firmware
	# installation process.
	#
	cd $tmpdir && (
		cd ${prefix:-.}
		rm -rf block crypto drivers fs init ipc
		rm -rf kernel lib mm net samples security sound
		rm -rf tools usr virt Documentation
	)
	tar -cf - ${prefix:-.}
)

package_tools () (
	extract_source $tmpdir &&
	#
	# Get rid of the unused files not needed by kernel tools
	# compilation. Keep tools/ and include/ but also lib/, arch/
	# and scripts/ since perf(1) is trying hard to reuse the
	# kernel source code.
	#
	cd $tmpdir && (
		cd ${prefix:-.}
		rm -rf block crypto drivers fs firmware init ipc
		rm -rf kernel mm net samples security sound
		rm -rf usr virt Documentation
	)
	tar -cf - ${prefix:-.}
)

#
# The devel tarball is not complete: 'modules_prepare' target must
# still be run and it's missing the output files (given by
# package__list_output_devel_files()).
#
# So this is can be used mostly to update a kernel config.
#
# Note: this is currently only used by kdist-config--propagate.
#
package_devel () (
	git archive --format=tar --prefix=$prefix $rev \
		$(package__list_devel_files --rev=$rev) \
		$(package__list_arch_devel_files --rev=$rev)
)

suffix=tar
zip=cat
rev=
tar=
quiet=

while
	case $1 in
	-z|--gzip)
		suffix=tar.gz
		zip=gzip ;;
	-j|--bzip2)
		suffix=tar.bz2
		zip=bzip2 ;;
	-o)
		shift
		output_directory=$1 ;;
	--output-dir=*)
		output_directory=${1#*=} ;;
	--prefix=*)
		prefix=${1#*=} ;;
	-r)
		shift
		rev=$1 ;;
	-q)
		quiet=yes ;;
	-*)
		usage ;;
	*)
		break
	esac
do
	shift
done

case $#,$1 in
1,source|1,headers|1,devel|1,firmware|1,tools)
	;;
*)
	usage
esac

#
# Leaving 'tar' empty means that the name of the the tarball is going
# to be generated. Leaving 'output_directory' empty means that the
# output will be written to stdout and 'tar' will be ignored in that
# case.
#
if test "$output_directory"
then
	if test -d "$output_directory"; then
		tar=
	elif test -d $(dirname "$output_directory"); then
		tar=$(basename $output_directory)
		output_directory=$(dirname $output_directory)
	else
		die "Output directory is invalid."
	fi

	output_directory=$(readlink -e "$output_directory")
elif test -t 1
then
	tar=
	output_directory=$(pwd)
else
	output_directory=
fi

#
# Go to the kernel topdir so we can first adjust the tar filename:
# include the release version number.
#
origin_directory=$(pwd)
kdist__cd_repository kernel || exit

git__check_clean_work_tree ||
	warn "Your local changes won't be included in the tarball"

#
# Sanitize 'prefix': it shouldn't start with a leading slash since the
# prefix may be used by tar(1) directly, and it should be terminated
# by a trailing slash too since the prefix can also be passed to
# git-archive and we want a consistent behaviour across the various
# commands.
#
if test "$prefix"; then
	prefix=$(echo $prefix/ | sed -re 's,/+,/,g')
	case $prefix in
	/*)	warn "Stripping prefix from leading '/'"
		prefix=${prefix#/} ;;
	esac
fi

#
# Setup the revision
#
case $rev in
HEAD|"")
	rev=$(git describe --tags --abbrev=4 HEAD) ;;
esac

case $output_directory in
"")
	tar=/dev/stdout ;;
*)
	tar=${tar:-kernel-$1-${rev#v}.$suffix}
	tar=$output_directory/$tar
esac

#
# Do the tarball
#
cleanup_on_exit () {
	if [ $tar ] && [ $tar != /dev/stdout ]; then
		rm -f $tar
	fi
	rm -fr $tmpdir
}

trap cleanup_on_exit 0

tmpdir=$(mktemp -d)

#
# generate the package
#
set -o pipefail

{ package_$1 | $zip; }>$tar || {
	die "Failed to generate the archive."
}

if ! test $quiet && test "$tar" != /dev/stdout; then
	echo ${tar#$origin_directory/}
fi

# archive is now finished, clear 'tar' var so we don't remove the file
# during the cleanup stage.
tar=
