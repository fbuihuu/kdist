#! /bin/bash

USAGE="update [-v] [-i] [-n|--dry-run] [--force|-f] [--template=<file>] [--type=<type>] [file]|[<pattern>...]"

declare -a targets
resolve_opts=
stage_opts=
force=
template=
dry_run=

while
	case $1 in
	-i)		stage_opts="-i -p" ;;
	--type=*)	resolve_opts="--type=${1#--type=}" ;;
	--force|-f)	force=yes ;;
	--template=*)	template=${1#--template=} ;;
	-v|--verbose)	verbose=yes ;;
	-n|--dry-run)	dry_run=yes ;;
	-*)		usage ;;
	*)		break
	esac
do
	shift
done

cleanup_on_exit () {
	rm -fr $tmpdir
}

cleanup_on_error () {
	# It seems that kconfig still updates the conf file even if it
	# fails to read the user answer. Therefore the work tree might
	# be modified even after being restored. Be sure that won't
	# happen by killing kconfig.
	test $coproc_pid && kill -9 $coproc_pid

	cd $(kdist__get_repository configs)
	git reset -q --hard HEAD &&
	if test $stash_id; then
		if ! git stash apply -q --index $stash_id; then
			warn "Error when restoring back the previous state !"
			warn "Your previous changes are still stashed."
			warn "Please restore then manually with git-stash."
		fi
	fi
	cleanup_on_exit
}

trap cleanup_on_exit 0

stash_id=
tmpdir=$(mktemp -d)

kdist__cd_kernel_topdir &&
kernel_path=$(pwd) ||
exit

if test $# -eq 0; then
	#
	# No target was specified, we'll verify the 'default' config
	# with the current kernel.
	#
	default_pattern=$(config__default_pattern .config) &&
	set $default_pattern ||
	exit
fi

if test -n "$template"; then
	template=$(readlink -e "$template") ||
	die "template not found."
fi

for t in "$@"; do
	if test -f "$t"; then
		targets+=("$(readlink -f "$t")")
	else
		n=${#targets[*]}
		for f in $(config__resolve_files $resolve_opts "$t")
		do
			targets+=("$f")
			#
			# For now refuse to modify any files with
			# unstaged changes since git-stash won't be
			# able to restore them.
			#
			if test "$force" != yes; then
				kdist__cd_repository configs
				case $(git status --porcelain -- $f) in
				[MARC]" "*|"")
					# index and work tree matches
					cd - >/dev/null
					continue
				esac
				die "$f has unstaged changes, exiting ('-f' to force)."
			fi
		done
		test ${#targets[*]} -gt $n ||
		die "No config files match '$t' pattern."
	fi
done

#
# Now we're going to play with the index, so back it up.
#
kdist__cd_repository configs

if ! git__check_clean_work_tree 2>/dev/null; then
	stash_id=$(git stash create) ||
	die "git-stash failed"
fi
trap cleanup_on_error 0

#
# This function parse kconfig's output.
#
parse_choice () {
	_CHOICE_NUM_ITEM=$(grep -c "^[[:space:]]*[[:digit:]]\+\." <<<"$1")
	_CHOICE_NUM_NEW=$(grep -c "[[:digit:]]\+\. .*(NEW)$" <<<"$1")
}

read_conf_output () {
	CONF_OUTPUT=
	CONF_TYPE=
	CONF_SYM=

	while :
	do
		# Terminate if the coproc died, its status is checked
		# later.
		test -n "${COPROC[0]}" &&
		#
		# Read kconfig output char by char until we recognize
		# a special pattern meaning that kconfig is waiting
		# for an answer. We reset IFS as we want to keep
		# newline characters.
		#
		IFS='' read -N1 -u${COPROC[0]} char ||
		return

		CONF_OUTPUT+="$char"

		case $CONF_OUTPUT in
		*choice\[*\]:" ")
			parse_choice "$CONF_OUTPUT"
			case $_CHOICE_NUM_ITEM,$_CHOICE_NUM_NEW in
			1,*|*,0) continue ;;
			esac
			CONF_TYPE=choice
			break ;;
		*\[*\]" "\(NEW\)" ")
			CONF_SYM=$(expr "$CONF_OUTPUT" : ".*(\(.*\)) \[.*\] (NEW)")
			CONF_TYPE=value
			break ;;
		*choice\[*\]:" "[[:digit:]])		;&
		*\[*\]" "[ymn])				;&
		*\[[[:digit:]]*\]" "[[:digit:]])	;&
		*\[0x[[:xdigit:]]*\]" "0x[[:xdigit:]])
			# read until newline char and append the rest
			# of the line to CONF_OUTPUT adding back the
			# newline char.
			read -u${COPROC[0]} char
			CONF_OUTPUT+="$char\n"
			CONF_TYPE=resolved
			break ;;
		esac
	done
}

warn_about_wrong_guess () {
	warn "***"
	warn "*** I tried '$2' for '$1', but it seems invalid for this config."
	warn "***"
	warn "*** Please resolve this symbol manually."
	warn "***"
}

__update_config () {
	KCONFIG_CONFIG="$1" \
	KCONFIG_NOTIMESTAMP=1 \
	KCONFIG_OVERWRITECONFIG=1 \
	make -s ARCH=$2 oldconfig
}

#
# In case serveral targets are given, cache the result for each target
# so manually resolved symbol are asked only once. It assumes that a
# group of targets use the same vals.
#
declare -A symbol_cache

do_update_config () {
	local -i stats_resolv_auto=0
	local -i stats_resolv_user=0
	local -i stats_resolv_cache=0

	coproc {
		__update_config "$1" $2
	}
	coproc_pid=$!

	while read_conf_output
	do
		echo -ne "$CONF_OUTPUT"

		if test -n "${symbol_cache[$CONF_OUTPUT]}"; then
			CONF_TYPE=cached
		fi

		case $CONF_TYPE in
		resolved)
			continue
			;;
		cached)
			val=${symbol_cache[$CONF_OUTPUT]}
			stats_resolv_cache+=1
			echo "$val"
			;;
		choice)
			#
			# We have to resolve choices manually since we
			# don't know which symbol this choice
			# corresponds to.
			#
			read val
			stats_resolv_user+=1
			;;
		value)
			#
			# Can the symbol's value be found in the
			# template ?
			#
			test -n "$template" &&
			val=$(config__lookup_symbol_quotes $CONF_SYM "$template") &&
			case $val in
			"")
				# symbol is not set
				val=N ;&
			\"*\")
				# strip the quotes
				val=${val#\"}
				val=${val%\"} ;&
			*)
				#
				# Try to detect if something's going wrong:
				# conf can reject our last guess. This is
				# probably something happening when different
				# architectures have different value ranges
				# for some symbols.
				#
				if test "$CONF_SYM" = "$last_sym"; then
					#
					# Warn the user only once
					#
					[ -z "$notified" ] && {
						warn_about_wrong_guess $CONF_SYM $val
						notified=yes
					}
					read val
					stats_resolv_user+=1
					stats_resolv_auto+=-1
				else
					#
					# Try to submit the value taken
					# from the template
					#
					notified=
					echo "$val"
					stats_resolv_auto+=1
				fi
				last_sym=$CONF_SYM ;;
			esac || {
				# value is not in the template, manual
				# resolution is required.
				read val
				stats_resolv_user+=1
			}
		esac
		symbol_cache[$CONF_OUTPUT]=$val
		echo >&${COPROC[1]} "$val"
	done

	if ! wait $coproc_pid; then
		die "coproc exited abnormally ($?), aborting."
	fi
	coproc_pid=

	say "=========================="
	say "Symbols resolved by kdist : $stats_resolv_auto"
	say "Symbols resolved by user  : $stats_resolv_user"
	say "Symbols resolved by cache : $stats_resolv_cache"
	say "=========================="
}

#
# convert a config revision into a kernel tag
#
update_config () {
	local config=$(readlink -f $1)
	local conf_rev=${1%%/*}
	local kern_rev

	pushd $kernel_path >/dev/null

	kern_rev=$(config__map_to_kernel $conf_rev) &&
	echo "Updating $1 with $kern_rev kernel..." ||
	exit

	#
	# Just reuse the devel source if it already exists
	#
	if ! test -d $tmpdir/kernel-devel-$kern_rev; then
		kdist package --format=tar --prefix=kernel-devel-$kern_rev \
			-r $kern_rev devel | tar -C $tmpdir -xf - ||
		die "Failed to get the devel package for rev $rev"
	fi
	cd $tmpdir/kernel-devel-$kern_rev

	#
	# Run Kbuild to update the config file.
	#
	arch=$(config__read_architecture $config) ||
	die "config file seems corrupted, can't retrieve arch information."

	do_update_config "$config" $arch ||
	die "Failed to run make oldconfig for $t"

	popd >/dev/null
}

for t in "${targets[@]}"
do
	update_config "$t" || die "Failed to update $t."

	# check that the target is part of the config repository.
	if git ls-files "$t" &>/dev/null; then
		# FIXME: stage changes if there're actual changes (excluding
		# the comments at the begining of the config file).
		echo "Staging changes in $t" &&
		git stage $stage_opts $t &&
		git checkout -- $t  ||
		die "Failed to propagate changes to $t."
	fi
done


if ! test $dry_run; then
	trap cleanup_on_exit 0
fi
