#! /bin/bash

USAGE="update [-v] [-i] [-n|--dry-run] [--force|-f] [--template=<file>] [--type=<type>] [file]|[<pattern>...]"

declare -a targets
resolve_opts=
stage_opts=
force=
template=

while
	case $1 in
	-i)		stage_opts="-i -p" ;;
	--type=*)	resolve_opts="--type=${1#--type=}" ;;
	--force|-f)	force=yes ;;
	--template=*)	template=${1#--template=} ;;
	-v|--verbose)	verbose=yes ;;
	-*)		usage ;;
	*)		break
	esac
do
	shift
done

cleanup_on_exit () {
	rm -fr $tmpdir
}

cleanup_on_error () {
	cd $(kdist__get_repository configs)
	git reset -q --hard HEAD &&
	if test $stash_id; then
		if ! git stash apply -q --index $stash_id; then
			warn "Error when restoring back the previous state !"
			warn "Your previous changes are still stashed."
			warn "Please restore then manually with git-stash."
		fi
	fi
	cleanup_on_exit
}

trap cleanup_on_exit 0

stash_id=
tmpdir=$(mktemp -d)

kdist__cd_kernel_topdir &&
kernel_path=$(pwd) ||
exit

if test $# -eq 0; then
	#
	# No target was specified, we'll verify the 'default' config
	# with the current kernel.
	#
	default_pattern=$(config__default_pattern .config) &&
	set $default_pattern ||
	exit
fi

if test -n "$template"; then
	template=$(readlink -e "$template") ||
	die "template not found."
fi

for t in "$@"; do
	if test -f "$t"; then
		t=$(readlink -f "$t")
	else
		t=$(config__resolve_files $resolve_opts "$t")
		test -n "$t" ||
		die "No config files match '$t' pattern."

		#
		# For now refuse to modify any files with unstaged
		# changes since git-stash won't be able to restore
		# them.
		#
		kdist__cd_repository configs
		case $(git status --porcelain -- $t) in
		""|[MARC]" "*)
			# index and work tree matches
			;;
		*)
			test "$force" != yes &&
			die "$t has unstaged changes, exiting ('-f' to force)."
		esac
		cd - >/dev/null
	fi
	targets+=("$t")
done

#
# Now we're going to play with the index, so back it up.
#
kdist__cd_repository configs

if ! git__check_clean_work_tree 2>/dev/null; then
	stash_id=$(git stash create) ||
	die "git-stash failed"
fi
trap cleanup_on_error 0

#
# Ok this one is pretty crap...
#
read_conf_output () {
	while :
	do
		IFS='\' read -n1 -t0.005 -u${COPROC[0]} c 2>/dev/null
		rv=$?
		if ! test $rv -eq 0; then
			[ $rv -gt 128 ] && rv=0
			break
		fi

		case "$c" in
		'')	c="\n"
		esac
		CONF_REPLY+="$c"
	done
	return $rv
}

warn_about_wrong_guess () {
	warn "***"
	warn "*** I tried '$2' for '$1', but it seems invalid for this config."
	warn "***"
	warn "*** Please resolve this symbol manually."
	warn "***"
}

__update_config () {
	KCONFIG_CONFIG="$1" \
	KCONFIG_NOTIMESTAMP=1 \
	KCONFIG_OVERWRITECONFIG=1 \
	make -s ARCH=$2 oldconfig
}

update_config_from_template () {
	local -i stats_resolv_auto=0
	local -i stats_resolv_user=0

	coproc {
		__update_config "$1" $2
	}
	coproc_pid=$!

	while read_conf_output
	do
		case "$CONF_REPLY" in
		*choice\[*\]:" ")
			#
			# We have to resolve choices manually since we
			# don't know which symbol this choice
			# corresponds to.
			#
			echo -ne "$CONF_REPLY"
			read val
			echo >&${COPROC[1]} "$val"
			CONF_REPLY=""
			stats_resolv_user+=1
			;;
		*\[*\]" "\(NEW\)" ")
			#
			# Can the symbol's value be found in the
			# template ?
			#
			last_sym="$sym"
			sym=$(expr "$CONF_REPLY" : ".*(\([[:alnum:]_]*\)) \[") ||
			bug "unable to parse symbol"

			val=$(config__lookup_symbol_quotes $sym "$template") &&
			case $val in
			"")
				# symbol is not set
				val=N ;&
			\"*\")
				# strip the quotes
				val=${val#\"}
				val=${val%\"} ;&
			*)
				#
				# Try to detect if something's going wrong:
				# conf can reject our last guess. This is
				# probably something happening when different
				# architectures have different value ranges
				# for some symbols.
				#
				if test "$sym" = "$last_sym"; then
					#
					# Warn the user only once
					#
					[ -z "$notified" ] && {
						warn_about_wrong_guess $sym $val
						notified=yes
					}
					echo -ne "$CONF_REPLY"
					read val
					stats_resolv_user+=1
					stats_resolv_auto+=-1
				else
					#
					# Try to submit the value taken
					# from the template
					#
					notified=
					echo -ne "$CONF_REPLY"
					echo "$val"
					stats_resolv_auto+=1
				fi ;;
			esac || {
				# value is not in the template, ask to
				# the user to resolve this.
				echo -ne "$CONF_REPLY"
				read val
				stats_resolv_user+=1
			}
			echo >&${COPROC[1]} "$val"
			CONF_REPLY=""
			;;
		esac
	done

	if ! wait $coproc_id; then
		die "coproc exited abnormally ($?), aborting."
	fi


	say "=========================="
	say "Symbols resolved by kdist : $stats_resolv_auto"
	say "Symbols resolved by user  : $stats_resolv_user"
	say "=========================="
}

#
# convert a config revision into a kernel tag
#
update_config () {
	local config=$(readlink -f $1)
	local conf_rev=${1%%/*}
	local kern_rev

	pushd $kernel_path >/dev/null

	kern_rev=$(config__map_to_kernel $conf_rev) &&
	echo "Updating $1 with $kern_rev kernel..." ||
	exit

	#
	# Just reuse the devel source if it already exists
	#
	if ! test -d $tmpdir/kernel-devel-$kern_rev; then
		kdist package --format=tar --prefix=kernel-devel-$kern_rev \
			-r $kern_rev devel | tar -C $tmpdir -xf - ||
		die "Failed to get the devel package for rev $rev"
	fi
	cd $tmpdir/kernel-devel-$kern_rev

	#
	# Run Kbuild to update the config file.
	#
	arch=$(config__read_architecture $config) ||
	die "config file seems corrupted, can't retrieve arch information."

	$do_update "$config" $arch ||
	die "Failed to run make oldconfig for $t"

	popd >/dev/null
}

do_update=__update_config
if test -n "$template"; then
	do_update=update_config_from_template
fi

for t in "${targets[@]}"
do
	update_config "$t" || die "Failed to update $t."

	# check that the target is part of the config repository.
	if git ls-files "$t" &>/dev/null; then
		# FIXME: stage changes if there're actual changes (excluding
		# the comments at the begining of the config file).
		echo "Staging changes in $t" &&
		git stage $stage_opts $t &&
		git checkout -- $t  ||
		die "Failed to propagate changes to $t."
	fi
done


if ! test $dry_run; then
	trap cleanup_on_exit 0
fi
